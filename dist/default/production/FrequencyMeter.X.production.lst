

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Mar 23 00:22:04 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.41
    21                           ; Generated 25/01/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0036                     _RB6	set	54
   115  0037                     _RB7	set	55
   116  0032                     _RB2	set	50
   117  0033                     _RB3	set	51
   118  0034                     _RB4	set	52
   119  0035                     _RB5	set	53
   120  0086                     _TRISB	set	134
   121                           
   122                           	psect	strings
   123  0003                     __pstrings:	
   124  0003                     stringtab:	
   125  0003                     __stringtab:	
   126  0003                     stringcode:	
   127                           ;	String table - string pointers are 1 byte each
   128                           
   129  0003                     stringdir:	
   130  0003  3000               	movlw	high stringdir
   131  0004  008A               	movwf	10
   132  0005  0804               	movf	4,w
   133  0006  0A84               	incf	4,f
   134  0007  0782               	addwf	2,f
   135  0008                     __stringbase:	
   136  0008  3400               	retlw	0
   137  0009                     __end_of__stringtab:	
   138  0009                     STR_5:	
   139  0009  3477               	retlw	119	;'w'
   140  000A  3477               	retlw	119	;'w'
   141  000B  3477               	retlw	119	;'w'
   142  000C  342E               	retlw	46	;'.'
   143  000D  346A               	retlw	106	;'j'
   144  000E  346F               	retlw	111	;'o'
   145  000F  3463               	retlw	99	;'c'
   146  0010  346C               	retlw	108	;'l'
   147  0011  3465               	retlw	101	;'e'
   148  0012  3474               	retlw	116	;'t'
   149  0013  3465               	retlw	101	;'e'
   150  0014  3463               	retlw	99	;'c'
   151  0015  3468               	retlw	104	;'h'
   152  0016  342E               	retlw	46	;'.'
   153  0017  3463               	retlw	99	;'c'
   154  0018  346F               	retlw	111	;'o'
   155  0019  346D               	retlw	109	;'m'
   156  001A  3400               	retlw	0
   157  001B                     STR_1:	
   158  001B  344C               	retlw	76	;'L'
   159  001C  3443               	retlw	67	;'C'
   160  001D  3444               	retlw	68	;'D'
   161  001E  3420               	retlw	32	;' '
   162  001F  344C               	retlw	76	;'L'
   163  0020  3469               	retlw	105	;'i'
   164  0021  3462               	retlw	98	;'b'
   165  0022  3472               	retlw	114	;'r'
   166  0023  3461               	retlw	97	;'a'
   167  0024  3472               	retlw	114	;'r'
   168  0025  3479               	retlw	121	;'y'
   169  0026  3420               	retlw	32	;' '
   170  0027  3466               	retlw	102	;'f'
   171  0028  346F               	retlw	111	;'o'
   172  0029  3472               	retlw	114	;'r'
   173  002A  3400               	retlw	0
   174  002B                     STR_3:	
   175  002B  3444               	retlw	68	;'D'
   176  002C  3465               	retlw	101	;'e'
   177  002D  3476               	retlw	118	;'v'
   178  002E  3465               	retlw	101	;'e'
   179  002F  346C               	retlw	108	;'l'
   180  0030  346F               	retlw	111	;'o'
   181  0031  3470               	retlw	112	;'p'
   182  0032  3465               	retlw	101	;'e'
   183  0033  3464               	retlw	100	;'d'
   184  0034  3420               	retlw	32	;' '
   185  0035  3442               	retlw	66	;'B'
   186  0036  3479               	retlw	121	;'y'
   187  0037  3400               	retlw	0
   188  0038                     STR_2:	
   189  0038  344D               	retlw	77	;'M'
   190  0039  3450               	retlw	80	;'P'
   191  003A  344C               	retlw	76	;'L'
   192  003B  3441               	retlw	65	;'A'
   193  003C  3442               	retlw	66	;'B'
   194  003D  3420               	retlw	32	;' '
   195  003E  3458               	retlw	88	;'X'
   196  003F  3443               	retlw	67	;'C'
   197  0040  3438               	retlw	56	;'8'
   198  0041  3400               	retlw	0
   199  0042                     STR_4:	
   200  0042  344A               	retlw	74	;'J'
   201  0043  346F               	retlw	111	;'o'
   202  0044  3463               	retlw	99	;'c'
   203  0045  346C               	retlw	108	;'l'
   204  0046  3465               	retlw	101	;'e'
   205  0047  3474               	retlw	116	;'t'
   206  0048  3465               	retlw	101	;'e'
   207  0049  3463               	retlw	99	;'c'
   208  004A  3468               	retlw	104	;'h'
   209  004B  3400               	retlw	0
   210                           
   211                           ; #config settings
   212  0000                     
   213                           	psect	cinit
   214  07FC                     start_initialization:	
   215  07FC                     __initialization:	
   216  07FC                     end_of_initialization:	
   217                           ;End of C runtime variable initialization code
   218                           
   219  07FC                     __end_of__initialization:	
   220  07FC  0183               	clrf	3
   221  07FD  120A  118A  2F08   	ljmp	_main	;jump to C main() function
   222                           
   223                           	psect	cstackCOMMON
   224  0070                     __pcstackCOMMON:	
   225  0070                     ?_Lcd_Port:	
   226  0070                     ??_Lcd_Port:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_Lcd_Cmd:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_Lcd_Init:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_Lcd_Write_Char:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_Lcd_Write_String:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_Lcd_Shift_Right:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_Lcd_Shift_Left:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_Lcd_Clear:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_main:	
   251                           ; 2 bytes @ 0x0
   252                           
   253  0070                     Lcd_Port@a:	
   254                           ; 2 bytes @ 0x0
   255                           
   256                           
   257                           ; 1 bytes @ 0x0
   258  0070                     	ds	1
   259  0071                     ??_Lcd_Cmd:	
   260  0071                     ??_Lcd_Write_Char:	
   261                           ; 1 bytes @ 0x1
   262                           
   263                           
   264                           ; 1 bytes @ 0x1
   265  0071                     	ds	1
   266  0072                     Lcd_Write_Char@temp:	
   267                           
   268                           ; 1 bytes @ 0x2
   269  0072                     	ds	1
   270  0073                     Lcd_Cmd@a:	
   271  0073                     Lcd_Write_Char@y:	
   272                           ; 1 bytes @ 0x3
   273                           
   274                           
   275                           ; 1 bytes @ 0x3
   276  0073                     	ds	1
   277  0074                     ??_Lcd_Clear:	
   278  0074                     ?_Lcd_Set_Cursor:	
   279                           ; 1 bytes @ 0x4
   280                           
   281  0074                     ??_Lcd_Init:	
   282                           ; 1 bytes @ 0x4
   283                           
   284  0074                     ??_Lcd_Shift_Right:	
   285                           ; 1 bytes @ 0x4
   286                           
   287  0074                     ??_Lcd_Shift_Left:	
   288                           ; 1 bytes @ 0x4
   289                           
   290  0074                     Lcd_Set_Cursor@b:	
   291                           ; 1 bytes @ 0x4
   292                           
   293  0074                     Lcd_Write_Char@a:	
   294                           ; 1 bytes @ 0x4
   295                           
   296                           
   297                           ; 1 bytes @ 0x4
   298  0074                     	ds	1
   299  0075                     ??_Lcd_Set_Cursor:	
   300  0075                     ??_Lcd_Write_String:	
   301                           ; 1 bytes @ 0x5
   302                           
   303  0075                     Lcd_Write_String@i:	
   304                           ; 1 bytes @ 0x5
   305                           
   306                           
   307                           ; 2 bytes @ 0x5
   308  0075                     	ds	2
   309  0077                     Lcd_Set_Cursor@a:	
   310  0077                     Lcd_Write_String@a:	
   311                           ; 1 bytes @ 0x7
   312                           
   313                           
   314                           ; 1 bytes @ 0x7
   315  0077                     	ds	1
   316  0078                     Lcd_Set_Cursor@z:	
   317                           
   318                           ; 1 bytes @ 0x8
   319  0078                     	ds	1
   320  0079                     Lcd_Set_Cursor@y:	
   321                           
   322                           ; 1 bytes @ 0x9
   323  0079                     	ds	1
   324  007A                     Lcd_Set_Cursor@temp:	
   325                           
   326                           ; 1 bytes @ 0xA
   327  007A                     	ds	1
   328  007B                     ??_main:	
   329                           
   330                           ; 1 bytes @ 0xB
   331  007B                     	ds	3
   332                           
   333                           	psect	cstackBANK0
   334  0020                     __pcstackBANK0:	
   335  0020                     main@a:	
   336                           
   337                           ; 2 bytes @ 0x0
   338  0020                     	ds	2
   339                           
   340                           	psect	maintext
   341  0708                     __pmaintext:	
   342 ;;
   343 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   344 ;;
   345 ;; *************** function _main *****************
   346 ;; Defined at:
   347 ;;		line 30 in file "FreqMeter.c"
   348 ;; Parameters:    Size  Location     Type
   349 ;;		None
   350 ;; Auto vars:     Size  Location     Type
   351 ;;  a               2    0[BANK0 ] unsigned int 
   352 ;; Return value:  Size  Location     Type
   353 ;;                  2   59[None  ] int 
   354 ;; Registers used:
   355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   356 ;; Tracked objects:
   357 ;;		On entry : B00/0
   358 ;;		On exit  : 0/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   361 ;;      Params:         0       0       0       0       0
   362 ;;      Locals:         0       2       0       0       0
   363 ;;      Temps:          3       0       0       0       0
   364 ;;      Totals:         3       2       0       0       0
   365 ;;Total ram usage:        5 bytes
   366 ;; Hardware stack levels required when called:    3
   367 ;; This function calls:
   368 ;;		_Lcd_Clear
   369 ;;		_Lcd_Init
   370 ;;		_Lcd_Set_Cursor
   371 ;;		_Lcd_Shift_Left
   372 ;;		_Lcd_Shift_Right
   373 ;;		_Lcd_Write_Char
   374 ;;		_Lcd_Write_String
   375 ;; This function is called by:
   376 ;;		Startup code after reset
   377 ;; This function uses a non-reentrant model
   378 ;;
   379                           
   380                           
   381                           ;psect for function _main
   382  0708                     _main:	
   383                           
   384                           ;FreqMeter.c: 32: unsigned int a;
   385                           ;FreqMeter.c: 33: TRISB = 0x00;
   386                           
   387                           ;incstack = 0
   388                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   389  0708  1683               	bsf	3,5	;RP0=1, select bank1
   390  0709  1303               	bcf	3,6	;RP1=0, select bank1
   391  070A  0186               	clrf	6	;volatile
   392                           
   393                           ;FreqMeter.c: 34: Lcd_Init();
   394  070B  120A  118A  26AC  120A  118A  	fcall	_Lcd_Init
   395  0710                     l765:	
   396                           ;FreqMeter.c: 35: while(1)
   397                           
   398                           
   399                           ;FreqMeter.c: 36: {
   400                           ;FreqMeter.c: 37: Lcd_Clear();
   401  0710  120A  118A  25B2  120A  118A  	fcall	_Lcd_Clear
   402                           
   403                           ;FreqMeter.c: 38: Lcd_Set_Cursor(1,1);
   404  0715  01F4               	clrf	Lcd_Set_Cursor@b
   405  0716  0AF4               	incf	Lcd_Set_Cursor@b,f
   406  0717  3001               	movlw	1
   407  0718  120A  118A  2662  120A  118A  	fcall	_Lcd_Set_Cursor
   408                           
   409                           ;FreqMeter.c: 39: Lcd_Write_String("LCD Library for");
   410  071D  3013               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   411  071E  120A  118A  2607  120A  118A  	fcall	_Lcd_Write_String
   412                           
   413                           ;FreqMeter.c: 40: Lcd_Set_Cursor(2,1);
   414  0723  01F4               	clrf	Lcd_Set_Cursor@b
   415  0724  0AF4               	incf	Lcd_Set_Cursor@b,f
   416  0725  3002               	movlw	2
   417  0726  120A  118A  2662  120A  118A  	fcall	_Lcd_Set_Cursor
   418                           
   419                           ;FreqMeter.c: 41: Lcd_Write_String("MPLAB XC8");
   420  072B  3030               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   421  072C  120A  118A  2607  120A  118A  	fcall	_Lcd_Write_String
   422                           
   423                           ;FreqMeter.c: 42: _delay((unsigned long)((2000)*(20000000/4000.0)));
   424  0731  3033               	movlw	51
   425  0732  00FD               	movwf	??_main+2
   426  0733  30BB               	movlw	187
   427  0734  00FC               	movwf	??_main+1
   428  0735  30DF               	movlw	223
   429  0736  00FB               	movwf	??_main
   430  0737                     u297:	
   431  0737  0BFB               	decfsz	??_main,f
   432  0738  2F37               	goto	u297
   433  0739  0BFC               	decfsz	??_main+1,f
   434  073A  2F37               	goto	u297
   435  073B  0BFD               	decfsz	??_main+2,f
   436  073C  2F37               	goto	u297
   437  073D  2F3E               	nop2
   438                           
   439                           ;FreqMeter.c: 43: Lcd_Clear();
   440  073E  120A  118A  25B2  120A  118A  	fcall	_Lcd_Clear
   441                           
   442                           ;FreqMeter.c: 44: Lcd_Set_Cursor(1,1);
   443  0743  01F4               	clrf	Lcd_Set_Cursor@b
   444  0744  0AF4               	incf	Lcd_Set_Cursor@b,f
   445  0745  3001               	movlw	1
   446  0746  120A  118A  2662  120A  118A  	fcall	_Lcd_Set_Cursor
   447                           
   448                           ;FreqMeter.c: 45: Lcd_Write_String("Developed By");
   449  074B  3023               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   450  074C  120A  118A  2607  120A  118A  	fcall	_Lcd_Write_String
   451                           
   452                           ;FreqMeter.c: 46: Lcd_Set_Cursor(2,1);
   453  0751  01F4               	clrf	Lcd_Set_Cursor@b
   454  0752  0AF4               	incf	Lcd_Set_Cursor@b,f
   455  0753  3002               	movlw	2
   456  0754  120A  118A  2662  120A  118A  	fcall	_Lcd_Set_Cursor
   457                           
   458                           ;FreqMeter.c: 47: Lcd_Write_String("Jocletech");
   459  0759  303A               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   460  075A  120A  118A  2607  120A  118A  	fcall	_Lcd_Write_String
   461                           
   462                           ;FreqMeter.c: 48: _delay((unsigned long)((2000)*(20000000/4000.0)));
   463  075F  3033               	movlw	51
   464  0760  00FD               	movwf	??_main+2
   465  0761  30BB               	movlw	187
   466  0762  00FC               	movwf	??_main+1
   467  0763  30DF               	movlw	223
   468  0764  00FB               	movwf	??_main
   469  0765                     u307:	
   470  0765  0BFB               	decfsz	??_main,f
   471  0766  2F65               	goto	u307
   472  0767  0BFC               	decfsz	??_main+1,f
   473  0768  2F65               	goto	u307
   474  0769  0BFD               	decfsz	??_main+2,f
   475  076A  2F65               	goto	u307
   476  076B  2F6C               	nop2
   477                           
   478                           ;FreqMeter.c: 49: Lcd_Clear();
   479  076C  120A  118A  25B2  120A  118A  	fcall	_Lcd_Clear
   480                           
   481                           ;FreqMeter.c: 50: Lcd_Set_Cursor(1,1);
   482  0771  01F4               	clrf	Lcd_Set_Cursor@b
   483  0772  0AF4               	incf	Lcd_Set_Cursor@b,f
   484  0773  3001               	movlw	1
   485  0774  120A  118A  2662  120A  118A  	fcall	_Lcd_Set_Cursor
   486                           
   487                           ;FreqMeter.c: 51: Lcd_Write_String("www.jocletech.com");
   488  0779  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   489  077A  120A  118A  2607  120A  118A  	fcall	_Lcd_Write_String
   490                           
   491                           ;FreqMeter.c: 53: for(a=0;a<15;a++)
   492  077F  1283               	bcf	3,5	;RP0=0, select bank0
   493  0780  1303               	bcf	3,6	;RP1=0, select bank0
   494  0781  01A0               	clrf	main@a
   495  0782  01A1               	clrf	main@a+1
   496  0783  3000               	movlw	0
   497  0784  0221               	subwf	main@a+1,w
   498  0785  300F               	movlw	15
   499  0786  1903               	skipnz
   500  0787  0220               	subwf	main@a,w
   501  0788  1803               	btfsc	3,0
   502  0789  2FAB               	goto	l809
   503  078A                     l801:	
   504                           
   505                           ;FreqMeter.c: 54: {
   506                           ;FreqMeter.c: 55: _delay((unsigned long)((300)*(20000000/4000.0)));
   507  078A  3008               	movlw	8
   508  078B  00FD               	movwf	??_main+2
   509  078C  309D               	movlw	157
   510  078D  00FC               	movwf	??_main+1
   511  078E  3005               	movlw	5
   512  078F  00FB               	movwf	??_main
   513  0790                     u317:	
   514  0790  0BFB               	decfsz	??_main,f
   515  0791  2F90               	goto	u317
   516  0792  0BFC               	decfsz	??_main+1,f
   517  0793  2F90               	goto	u317
   518  0794  0BFD               	decfsz	??_main+2,f
   519  0795  2F90               	goto	u317
   520  0796  2F97               	nop2
   521                           
   522                           ;FreqMeter.c: 56: Lcd_Shift_Left();
   523  0797  120A  118A  25BD  120A  118A  	fcall	_Lcd_Shift_Left
   524  079C  3001               	movlw	1
   525  079D  1283               	bcf	3,5	;RP0=0, select bank0
   526  079E  1303               	bcf	3,6	;RP1=0, select bank0
   527  079F  07A0               	addwf	main@a,f
   528  07A0  1803               	skipnc
   529  07A1  0AA1               	incf	main@a+1,f
   530  07A2  3000               	movlw	0
   531  07A3  07A1               	addwf	main@a+1,f
   532  07A4  3000               	movlw	0
   533  07A5  0221               	subwf	main@a+1,w
   534  07A6  300F               	movlw	15
   535  07A7  1903               	skipnz
   536  07A8  0220               	subwf	main@a,w
   537  07A9  1C03               	skipc
   538  07AA  2F8A               	goto	l801
   539  07AB                     l809:	
   540                           
   541                           ;FreqMeter.c: 57: }
   542                           ;FreqMeter.c: 59: for(a=0;a<15;a++)
   543  07AB  01A0               	clrf	main@a
   544  07AC  01A1               	clrf	main@a+1
   545  07AD  3000               	movlw	0
   546  07AE  0221               	subwf	main@a+1,w
   547  07AF  300F               	movlw	15
   548  07B0  1903               	skipnz
   549  07B1  0220               	subwf	main@a,w
   550  07B2  1803               	btfsc	3,0
   551  07B3  2FD5               	goto	l823
   552  07B4                     l815:	
   553                           
   554                           ;FreqMeter.c: 60: {
   555                           ;FreqMeter.c: 61: _delay((unsigned long)((300)*(20000000/4000.0)));
   556  07B4  3008               	movlw	8
   557  07B5  00FD               	movwf	??_main+2
   558  07B6  309D               	movlw	157
   559  07B7  00FC               	movwf	??_main+1
   560  07B8  3005               	movlw	5
   561  07B9  00FB               	movwf	??_main
   562  07BA                     u327:	
   563  07BA  0BFB               	decfsz	??_main,f
   564  07BB  2FBA               	goto	u327
   565  07BC  0BFC               	decfsz	??_main+1,f
   566  07BD  2FBA               	goto	u327
   567  07BE  0BFD               	decfsz	??_main+2,f
   568  07BF  2FBA               	goto	u327
   569  07C0  2FC1               	nop2
   570                           
   571                           ;FreqMeter.c: 62: Lcd_Shift_Right();
   572  07C1  120A  118A  25C8  120A  118A  	fcall	_Lcd_Shift_Right
   573  07C6  3001               	movlw	1
   574  07C7  1283               	bcf	3,5	;RP0=0, select bank0
   575  07C8  1303               	bcf	3,6	;RP1=0, select bank0
   576  07C9  07A0               	addwf	main@a,f
   577  07CA  1803               	skipnc
   578  07CB  0AA1               	incf	main@a+1,f
   579  07CC  3000               	movlw	0
   580  07CD  07A1               	addwf	main@a+1,f
   581  07CE  3000               	movlw	0
   582  07CF  0221               	subwf	main@a+1,w
   583  07D0  300F               	movlw	15
   584  07D1  1903               	skipnz
   585  07D2  0220               	subwf	main@a,w
   586  07D3  1C03               	skipc
   587  07D4  2FB4               	goto	l815
   588  07D5                     l823:	
   589                           
   590                           ;FreqMeter.c: 63: }
   591                           ;FreqMeter.c: 65: Lcd_Clear();
   592  07D5  120A  118A  25B2  120A  118A  	fcall	_Lcd_Clear
   593                           
   594                           ;FreqMeter.c: 66: Lcd_Set_Cursor(2,1);
   595  07DA  01F4               	clrf	Lcd_Set_Cursor@b
   596  07DB  0AF4               	incf	Lcd_Set_Cursor@b,f
   597  07DC  3002               	movlw	2
   598  07DD  120A  118A  2662  120A  118A  	fcall	_Lcd_Set_Cursor
   599                           
   600                           ;FreqMeter.c: 67: Lcd_Write_Char('e');
   601  07E2  3065               	movlw	101
   602  07E3  120A  118A  2629  120A  118A  	fcall	_Lcd_Write_Char
   603                           
   604                           ;FreqMeter.c: 68: Lcd_Write_Char('S');
   605  07E8  3053               	movlw	83
   606  07E9  120A  118A  2629  120A  118A  	fcall	_Lcd_Write_Char
   607                           
   608                           ;FreqMeter.c: 69: _delay((unsigned long)((2000)*(20000000/4000.0)));
   609  07EE  3033               	movlw	51
   610  07EF  00FD               	movwf	??_main+2
   611  07F0  30BB               	movlw	187
   612  07F1  00FC               	movwf	??_main+1
   613  07F2  30DF               	movlw	223
   614  07F3  00FB               	movwf	??_main
   615  07F4                     u337:	
   616  07F4  0BFB               	decfsz	??_main,f
   617  07F5  2FF4               	goto	u337
   618  07F6  0BFC               	decfsz	??_main+1,f
   619  07F7  2FF4               	goto	u337
   620  07F8  0BFD               	decfsz	??_main+2,f
   621  07F9  2FF4               	goto	u337
   622  07FA  2FFB               	nop2
   623  07FB  2F10               	goto	l765
   624  07FC                     __end_of_main:	
   625                           ;FreqMeter.c: 70: }
   626                           ;FreqMeter.c: 71: return 0;
   627                           ;	Return value of _main is never used
   628                           
   629                           
   630                           	psect	text1
   631  0607                     __ptext1:	
   632 ;; *************** function _Lcd_Write_String *****************
   633 ;; Defined at:
   634 ;;		line 109 in file "lcd.h"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  a               1    wreg     PTR unsigned char 
   637 ;;		 -> STR_5(18), STR_4(10), STR_3(13), STR_2(10), 
   638 ;;		 -> STR_1(16), 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;  a               1    7[COMMON] PTR unsigned char 
   641 ;;		 -> STR_5(18), STR_4(10), STR_3(13), STR_2(10), 
   642 ;;		 -> STR_1(16), 
   643 ;;  i               2    5[COMMON] int 
   644 ;; Return value:  Size  Location     Type
   645 ;;                  1    wreg      void 
   646 ;; Registers used:
   647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   648 ;; Tracked objects:
   649 ;;		On entry : 0/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   653 ;;      Params:         0       0       0       0       0
   654 ;;      Locals:         3       0       0       0       0
   655 ;;      Temps:          0       0       0       0       0
   656 ;;      Totals:         3       0       0       0       0
   657 ;;Total ram usage:        3 bytes
   658 ;; Hardware stack levels used:    1
   659 ;; Hardware stack levels required when called:    2
   660 ;; This function calls:
   661 ;;		_Lcd_Write_Char
   662 ;; This function is called by:
   663 ;;		_main
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           
   668                           ;psect for function _Lcd_Write_String
   669  0607                     _Lcd_Write_String:	
   670                           
   671                           ;incstack = 0
   672                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   673                           ;Lcd_Write_String@a stored from wreg
   674  0607  00F7               	movwf	Lcd_Write_String@a
   675                           
   676                           ;lcd.h: 111: int i;
   677                           ;lcd.h: 112: for(i=0;a[i]!='\0';i++)
   678  0608  01F5               	clrf	Lcd_Write_String@i
   679  0609  01F6               	clrf	Lcd_Write_String@i+1
   680  060A                     l755:	
   681  060A  0875               	movf	Lcd_Write_String@i,w
   682  060B  0777               	addwf	Lcd_Write_String@a,w
   683  060C  0084               	movwf	4
   684  060D  120A  118A  2003  120A  118A  	fcall	stringdir
   685  0612  3A00               	xorlw	0
   686  0613  1903               	btfsc	3,2
   687  0614  0008               	return
   688                           
   689                           ;lcd.h: 113: Lcd_Write_Char(a[i]);
   690  0615  0875               	movf	Lcd_Write_String@i,w
   691  0616  0777               	addwf	Lcd_Write_String@a,w
   692  0617  0084               	movwf	4
   693  0618  120A  118A  2003  120A  118A  	fcall	stringdir
   694  061D  120A  118A  2629  120A  118A  	fcall	_Lcd_Write_Char
   695  0622  3001               	movlw	1
   696  0623  07F5               	addwf	Lcd_Write_String@i,f
   697  0624  1803               	skipnc
   698  0625  0AF6               	incf	Lcd_Write_String@i+1,f
   699  0626  3000               	movlw	0
   700  0627  07F6               	addwf	Lcd_Write_String@i+1,f
   701  0628  2E0A               	goto	l755
   702  0629                     __end_of_Lcd_Write_String:	
   703                           
   704                           	psect	text2
   705  0629                     __ptext2:	
   706 ;; *************** function _Lcd_Write_Char *****************
   707 ;; Defined at:
   708 ;;		line 93 in file "lcd.h"
   709 ;; Parameters:    Size  Location     Type
   710 ;;  a               1    wreg     unsigned char 
   711 ;; Auto vars:     Size  Location     Type
   712 ;;  a               1    4[COMMON] unsigned char 
   713 ;;  y               1    3[COMMON] unsigned char 
   714 ;;  temp            1    2[COMMON] unsigned char 
   715 ;; Return value:  Size  Location     Type
   716 ;;                  1    wreg      void 
   717 ;; Registers used:
   718 ;;		wreg, status,2, status,0, pclath, cstack
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   724 ;;      Params:         0       0       0       0       0
   725 ;;      Locals:         3       0       0       0       0
   726 ;;      Temps:          1       0       0       0       0
   727 ;;      Totals:         4       0       0       0       0
   728 ;;Total ram usage:        4 bytes
   729 ;; Hardware stack levels used:    1
   730 ;; Hardware stack levels required when called:    1
   731 ;; This function calls:
   732 ;;		_Lcd_Port
   733 ;; This function is called by:
   734 ;;		_Lcd_Write_String
   735 ;;		_main
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           
   740                           ;psect for function _Lcd_Write_Char
   741  0629                     _Lcd_Write_Char:	
   742                           
   743                           ;incstack = 0
   744                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   745                           ;Lcd_Write_Char@a stored from wreg
   746  0629  00F4               	movwf	Lcd_Write_Char@a
   747                           
   748                           ;lcd.h: 95: char temp,y;
   749                           ;lcd.h: 96: temp = a&0x0F;
   750  062A  0874               	movf	Lcd_Write_Char@a,w
   751  062B  390F               	andlw	15
   752  062C  00F1               	movwf	??_Lcd_Write_Char
   753  062D  0871               	movf	??_Lcd_Write_Char,w
   754  062E  00F2               	movwf	Lcd_Write_Char@temp
   755                           
   756                           ;lcd.h: 97: y = a&0xF0;
   757  062F  0874               	movf	Lcd_Write_Char@a,w
   758  0630  39F0               	andlw	240
   759  0631  00F1               	movwf	??_Lcd_Write_Char
   760  0632  0871               	movf	??_Lcd_Write_Char,w
   761  0633  00F3               	movwf	Lcd_Write_Char@y
   762                           
   763                           ;lcd.h: 98: RB7 = 1;
   764  0634  1283               	bcf	3,5	;RP0=0, select bank0
   765  0635  1303               	bcf	3,6	;RP1=0, select bank0
   766  0636  1786               	bsf	6,7	;volatile
   767                           
   768                           ;lcd.h: 99: Lcd_Port(y>>4);
   769  0637  0873               	movf	Lcd_Write_Char@y,w
   770  0638  00F1               	movwf	??_Lcd_Write_Char
   771  0639  3004               	movlw	4
   772  063A                     u195:	
   773  063A  1003               	clrc
   774  063B  0CF1               	rrf	??_Lcd_Write_Char,f
   775  063C  3EFF               	addlw	-1
   776  063D  1D03               	skipz
   777  063E  2E3A               	goto	u195
   778  063F  0871               	movf	??_Lcd_Write_Char,w
   779  0640  120A  118A  25D3  120A  118A  	fcall	_Lcd_Port
   780                           
   781                           ;lcd.h: 100: RB6 = 1;
   782  0645  1283               	bcf	3,5	;RP0=0, select bank0
   783  0646  1303               	bcf	3,6	;RP1=0, select bank0
   784  0647  1706               	bsf	6,6	;volatile
   785                           
   786                           ;lcd.h: 101: _delay((unsigned long)((40)*(20000000/4000000.0)));
   787  0648  3042               	movlw	66
   788  0649  00F1               	movwf	??_Lcd_Write_Char
   789  064A                     u347:	
   790  064A  0BF1               	decfsz	??_Lcd_Write_Char,f
   791  064B  2E4A               	goto	u347
   792  064C  0000               	nop
   793                           
   794                           ;lcd.h: 102: RB6 = 0;
   795  064D  1283               	bcf	3,5	;RP0=0, select bank0
   796  064E  1303               	bcf	3,6	;RP1=0, select bank0
   797  064F  1306               	bcf	6,6	;volatile
   798                           
   799                           ;lcd.h: 103: Lcd_Port(temp);
   800  0650  0872               	movf	Lcd_Write_Char@temp,w
   801  0651  120A  118A  25D3  120A  118A  	fcall	_Lcd_Port
   802                           
   803                           ;lcd.h: 104: RB6 = 1;
   804  0656  1283               	bcf	3,5	;RP0=0, select bank0
   805  0657  1303               	bcf	3,6	;RP1=0, select bank0
   806  0658  1706               	bsf	6,6	;volatile
   807                           
   808                           ;lcd.h: 105: _delay((unsigned long)((40)*(20000000/4000000.0)));
   809  0659  3042               	movlw	66
   810  065A  00F1               	movwf	??_Lcd_Write_Char
   811  065B                     u357:	
   812  065B  0BF1               	decfsz	??_Lcd_Write_Char,f
   813  065C  2E5B               	goto	u357
   814  065D  0000               	nop
   815                           
   816                           ;lcd.h: 106: RB6 = 0;
   817  065E  1283               	bcf	3,5	;RP0=0, select bank0
   818  065F  1303               	bcf	3,6	;RP1=0, select bank0
   819  0660  1306               	bcf	6,6	;volatile
   820  0661  0008               	return
   821  0662                     __end_of_Lcd_Write_Char:	
   822                           
   823                           	psect	text3
   824  05C8                     __ptext3:	
   825 ;; *************** function _Lcd_Shift_Right *****************
   826 ;; Defined at:
   827 ;;		line 116 in file "lcd.h"
   828 ;; Parameters:    Size  Location     Type
   829 ;;		None
   830 ;; Auto vars:     Size  Location     Type
   831 ;;		None
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      void 
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0, pclath, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   841 ;;      Params:         0       0       0       0       0
   842 ;;      Locals:         0       0       0       0       0
   843 ;;      Temps:          0       0       0       0       0
   844 ;;      Totals:         0       0       0       0       0
   845 ;;Total ram usage:        0 bytes
   846 ;; Hardware stack levels used:    1
   847 ;; Hardware stack levels required when called:    2
   848 ;; This function calls:
   849 ;;		_Lcd_Cmd
   850 ;; This function is called by:
   851 ;;		_main
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           
   856                           ;psect for function _Lcd_Shift_Right
   857  05C8                     _Lcd_Shift_Right:	
   858                           
   859                           ;lcd.h: 118: Lcd_Cmd(0x01);
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
   863  05C8  3001               	movlw	1
   864  05C9  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
   865                           
   866                           ;lcd.h: 119: Lcd_Cmd(0x0C);
   867  05CE  300C               	movlw	12
   868  05CF  120A  118A  25ED   	fcall	_Lcd_Cmd
   869  05D2  0008               	return
   870  05D3                     __end_of_Lcd_Shift_Right:	
   871                           
   872                           	psect	text4
   873  05BD                     __ptext4:	
   874 ;; *************** function _Lcd_Shift_Left *****************
   875 ;; Defined at:
   876 ;;		line 122 in file "lcd.h"
   877 ;; Parameters:    Size  Location     Type
   878 ;;		None
   879 ;; Auto vars:     Size  Location     Type
   880 ;;		None
   881 ;; Return value:  Size  Location     Type
   882 ;;                  1    wreg      void 
   883 ;; Registers used:
   884 ;;		wreg, status,2, status,0, pclath, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   890 ;;      Params:         0       0       0       0       0
   891 ;;      Locals:         0       0       0       0       0
   892 ;;      Temps:          0       0       0       0       0
   893 ;;      Totals:         0       0       0       0       0
   894 ;;Total ram usage:        0 bytes
   895 ;; Hardware stack levels used:    1
   896 ;; Hardware stack levels required when called:    2
   897 ;; This function calls:
   898 ;;		_Lcd_Cmd
   899 ;; This function is called by:
   900 ;;		_main
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           
   905                           ;psect for function _Lcd_Shift_Left
   906  05BD                     _Lcd_Shift_Left:	
   907                           
   908                           ;lcd.h: 124: Lcd_Cmd(0x01);
   909                           
   910                           ;incstack = 0
   911                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
   912  05BD  3001               	movlw	1
   913  05BE  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
   914                           
   915                           ;lcd.h: 125: Lcd_Cmd(0x08);
   916  05C3  3008               	movlw	8
   917  05C4  120A  118A  25ED   	fcall	_Lcd_Cmd
   918  05C7  0008               	return
   919  05C8                     __end_of_Lcd_Shift_Left:	
   920                           
   921                           	psect	text5
   922  0662                     __ptext5:	
   923 ;; *************** function _Lcd_Set_Cursor *****************
   924 ;; Defined at:
   925 ;;		line 53 in file "lcd.h"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  a               1    wreg     unsigned char 
   928 ;;  b               1    4[COMMON] unsigned char 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  a               1    7[COMMON] unsigned char 
   931 ;;  temp            1   10[COMMON] unsigned char 
   932 ;;  y               1    9[COMMON] unsigned char 
   933 ;;  z               1    8[COMMON] unsigned char 
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg, status,2, status,0, pclath, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   943 ;;      Params:         1       0       0       0       0
   944 ;;      Locals:         4       0       0       0       0
   945 ;;      Temps:          2       0       0       0       0
   946 ;;      Totals:         7       0       0       0       0
   947 ;;Total ram usage:        7 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; Hardware stack levels required when called:    2
   950 ;; This function calls:
   951 ;;		_Lcd_Cmd
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           
   958                           ;psect for function _Lcd_Set_Cursor
   959  0662                     _Lcd_Set_Cursor:	
   960                           
   961                           ;incstack = 0
   962                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   963                           ;Lcd_Set_Cursor@a stored from wreg
   964  0662  00F7               	movwf	Lcd_Set_Cursor@a
   965                           
   966                           ;lcd.h: 55: char temp,z,y;
   967                           ;lcd.h: 56: if(a == 1)
   968  0663  0377               	decf	Lcd_Set_Cursor@a,w
   969  0664  1D03               	btfss	3,2
   970  0665  2E87               	goto	l729
   971                           
   972                           ;lcd.h: 57: {
   973                           ;lcd.h: 58: temp = 0x80 + b - 1;
   974  0666  0874               	movf	Lcd_Set_Cursor@b,w
   975  0667  3E7F               	addlw	127
   976  0668  00F5               	movwf	??_Lcd_Set_Cursor
   977  0669  0875               	movf	??_Lcd_Set_Cursor,w
   978  066A  00FA               	movwf	Lcd_Set_Cursor@temp
   979                           
   980                           ;lcd.h: 59: z = temp>>4;
   981  066B  087A               	movf	Lcd_Set_Cursor@temp,w
   982  066C  00F5               	movwf	??_Lcd_Set_Cursor
   983  066D  3004               	movlw	4
   984  066E                     u215:	
   985  066E  1003               	clrc
   986  066F  0CF5               	rrf	??_Lcd_Set_Cursor,f
   987  0670  3EFF               	addlw	-1
   988  0671  1D03               	skipz
   989  0672  2E6E               	goto	u215
   990  0673  0875               	movf	??_Lcd_Set_Cursor,w
   991  0674  00F6               	movwf	??_Lcd_Set_Cursor+1
   992  0675  0876               	movf	??_Lcd_Set_Cursor+1,w
   993  0676  00F8               	movwf	Lcd_Set_Cursor@z
   994                           
   995                           ;lcd.h: 60: y = temp & 0x0F;
   996  0677  087A               	movf	Lcd_Set_Cursor@temp,w
   997  0678  390F               	andlw	15
   998  0679  00F5               	movwf	??_Lcd_Set_Cursor
   999  067A  0875               	movf	??_Lcd_Set_Cursor,w
  1000  067B  00F9               	movwf	Lcd_Set_Cursor@y
  1001                           
  1002                           ;lcd.h: 61: Lcd_Cmd(z);
  1003  067C  0878               	movf	Lcd_Set_Cursor@z,w
  1004  067D  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1005                           
  1006                           ;lcd.h: 62: Lcd_Cmd(y);
  1007  0682  0879               	movf	Lcd_Set_Cursor@y,w
  1008  0683  120A  118A  25ED   	fcall	_Lcd_Cmd
  1009                           
  1010                           ;lcd.h: 63: }
  1011  0686  0008               	return
  1012  0687                     l729:	
  1013                           
  1014                           ;lcd.h: 64: else if(a == 2)
  1015  0687  3002               	movlw	2
  1016  0688  0677               	xorwf	Lcd_Set_Cursor@a,w
  1017  0689  1D03               	btfss	3,2
  1018  068A  0008               	return
  1019                           
  1020                           ;lcd.h: 65: {
  1021                           ;lcd.h: 66: temp = 0xC0 + b - 1;
  1022  068B  0874               	movf	Lcd_Set_Cursor@b,w
  1023  068C  3EBF               	addlw	191
  1024  068D  00F5               	movwf	??_Lcd_Set_Cursor
  1025  068E  0875               	movf	??_Lcd_Set_Cursor,w
  1026  068F  00FA               	movwf	Lcd_Set_Cursor@temp
  1027                           
  1028                           ;lcd.h: 67: z = temp>>4;
  1029  0690  087A               	movf	Lcd_Set_Cursor@temp,w
  1030  0691  00F5               	movwf	??_Lcd_Set_Cursor
  1031  0692  3004               	movlw	4
  1032  0693                     u235:	
  1033  0693  1003               	clrc
  1034  0694  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1035  0695  3EFF               	addlw	-1
  1036  0696  1D03               	skipz
  1037  0697  2E93               	goto	u235
  1038  0698  0875               	movf	??_Lcd_Set_Cursor,w
  1039  0699  00F6               	movwf	??_Lcd_Set_Cursor+1
  1040  069A  0876               	movf	??_Lcd_Set_Cursor+1,w
  1041  069B  00F8               	movwf	Lcd_Set_Cursor@z
  1042                           
  1043                           ;lcd.h: 68: y = temp & 0x0F;
  1044  069C  087A               	movf	Lcd_Set_Cursor@temp,w
  1045  069D  390F               	andlw	15
  1046  069E  00F5               	movwf	??_Lcd_Set_Cursor
  1047  069F  0875               	movf	??_Lcd_Set_Cursor,w
  1048  06A0  00F9               	movwf	Lcd_Set_Cursor@y
  1049                           
  1050                           ;lcd.h: 69: Lcd_Cmd(z);
  1051  06A1  0878               	movf	Lcd_Set_Cursor@z,w
  1052  06A2  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1053                           
  1054                           ;lcd.h: 70: Lcd_Cmd(y);
  1055  06A7  0879               	movf	Lcd_Set_Cursor@y,w
  1056  06A8  120A  118A  25ED   	fcall	_Lcd_Cmd
  1057  06AB  0008               	return
  1058  06AC                     __end_of_Lcd_Set_Cursor:	
  1059                           
  1060                           	psect	text6
  1061  06AC                     __ptext6:	
  1062 ;; *************** function _Lcd_Init *****************
  1063 ;; Defined at:
  1064 ;;		line 74 in file "lcd.h"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;		None
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0, pclath, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1078 ;;      Params:         0       0       0       0       0
  1079 ;;      Locals:         0       0       0       0       0
  1080 ;;      Temps:          2       0       0       0       0
  1081 ;;      Totals:         2       0       0       0       0
  1082 ;;Total ram usage:        2 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    2
  1085 ;; This function calls:
  1086 ;;		_Lcd_Cmd
  1087 ;;		_Lcd_Port
  1088 ;; This function is called by:
  1089 ;;		_main
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           
  1094                           ;psect for function _Lcd_Init
  1095  06AC                     _Lcd_Init:	
  1096                           
  1097                           ;lcd.h: 76: Lcd_Port(0x00);
  1098                           
  1099                           ;incstack = 0
  1100                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1101  06AC  3000               	movlw	0
  1102  06AD  120A  118A  25D3  120A  118A  	fcall	_Lcd_Port
  1103                           
  1104                           ;lcd.h: 77: _delay((unsigned long)((20)*(20000000/4000.0)));
  1105  06B2  3082               	movlw	130
  1106  06B3  00F5               	movwf	??_Lcd_Init+1
  1107  06B4  30DD               	movlw	221
  1108  06B5  00F4               	movwf	??_Lcd_Init
  1109  06B6                     u367:	
  1110  06B6  0BF4               	decfsz	??_Lcd_Init,f
  1111  06B7  2EB6               	goto	u367
  1112  06B8  0BF5               	decfsz	??_Lcd_Init+1,f
  1113  06B9  2EB6               	goto	u367
  1114  06BA  2EBB               	nop2
  1115                           
  1116                           ;lcd.h: 78: Lcd_Cmd(0x03);
  1117  06BB  3003               	movlw	3
  1118  06BC  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1119                           
  1120                           ;lcd.h: 79: _delay((unsigned long)((5)*(20000000/4000.0)));
  1121  06C1  3021               	movlw	33
  1122  06C2  00F5               	movwf	??_Lcd_Init+1
  1123  06C3  3076               	movlw	118
  1124  06C4  00F4               	movwf	??_Lcd_Init
  1125  06C5                     u377:	
  1126  06C5  0BF4               	decfsz	??_Lcd_Init,f
  1127  06C6  2EC5               	goto	u377
  1128  06C7  0BF5               	decfsz	??_Lcd_Init+1,f
  1129  06C8  2EC5               	goto	u377
  1130  06C9  0000               	nop
  1131                           
  1132                           ;lcd.h: 80: Lcd_Cmd(0x03);
  1133  06CA  3003               	movlw	3
  1134  06CB  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1135                           
  1136                           ;lcd.h: 81: _delay((unsigned long)((11)*(20000000/4000.0)));
  1137  06D0  3048               	movlw	72
  1138  06D1  00F5               	movwf	??_Lcd_Init+1
  1139  06D2  306C               	movlw	108
  1140  06D3  00F4               	movwf	??_Lcd_Init
  1141  06D4                     u387:	
  1142  06D4  0BF4               	decfsz	??_Lcd_Init,f
  1143  06D5  2ED4               	goto	u387
  1144  06D6  0BF5               	decfsz	??_Lcd_Init+1,f
  1145  06D7  2ED4               	goto	u387
  1146  06D8  0000               	nop
  1147                           
  1148                           ;lcd.h: 82: Lcd_Cmd(0x03);
  1149  06D9  3003               	movlw	3
  1150  06DA  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1151                           
  1152                           ;lcd.h: 84: Lcd_Cmd(0x02);
  1153  06DF  3002               	movlw	2
  1154  06E0  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1155                           
  1156                           ;lcd.h: 85: Lcd_Cmd(0x02);
  1157  06E5  3002               	movlw	2
  1158  06E6  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1159                           
  1160                           ;lcd.h: 86: Lcd_Cmd(0x08);
  1161  06EB  3008               	movlw	8
  1162  06EC  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1163                           
  1164                           ;lcd.h: 87: Lcd_Cmd(0x00);
  1165  06F1  3000               	movlw	0
  1166  06F2  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1167                           
  1168                           ;lcd.h: 88: Lcd_Cmd(0x0C);
  1169  06F7  300C               	movlw	12
  1170  06F8  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1171                           
  1172                           ;lcd.h: 89: Lcd_Cmd(0x00);
  1173  06FD  3000               	movlw	0
  1174  06FE  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1175                           
  1176                           ;lcd.h: 90: Lcd_Cmd(0x06);
  1177  0703  3006               	movlw	6
  1178  0704  120A  118A  25ED   	fcall	_Lcd_Cmd
  1179  0707  0008               	return
  1180  0708                     __end_of_Lcd_Init:	
  1181                           
  1182                           	psect	text7
  1183  05B2                     __ptext7:	
  1184 ;; *************** function _Lcd_Clear *****************
  1185 ;; Defined at:
  1186 ;;		line 47 in file "lcd.h"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;		None
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;		None
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  2   32[None  ] int 
  1193 ;; Registers used:
  1194 ;;		wreg, status,2, status,0, pclath, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1200 ;;      Params:         0       0       0       0       0
  1201 ;;      Locals:         0       0       0       0       0
  1202 ;;      Temps:          0       0       0       0       0
  1203 ;;      Totals:         0       0       0       0       0
  1204 ;;Total ram usage:        0 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    2
  1207 ;; This function calls:
  1208 ;;		_Lcd_Cmd
  1209 ;; This function is called by:
  1210 ;;		_main
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           
  1215                           ;psect for function _Lcd_Clear
  1216  05B2                     _Lcd_Clear:	
  1217                           
  1218                           ;lcd.h: 49: Lcd_Cmd(0);
  1219                           
  1220                           ;incstack = 0
  1221                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1222  05B2  3000               	movlw	0
  1223  05B3  120A  118A  25ED  120A  118A  	fcall	_Lcd_Cmd
  1224                           
  1225                           ;lcd.h: 50: Lcd_Cmd(1);
  1226  05B8  3001               	movlw	1
  1227  05B9  120A  118A  25ED   	fcall	_Lcd_Cmd
  1228  05BC  0008               	return
  1229  05BD                     __end_of_Lcd_Clear:	
  1230                           
  1231                           	psect	text8
  1232  05ED                     __ptext8:	
  1233 ;; *************** function _Lcd_Cmd *****************
  1234 ;; Defined at:
  1235 ;;		line 38 in file "lcd.h"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  a               1    wreg     unsigned char 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  a               1    3[COMMON] unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, status,2, status,0, pclath, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1249 ;;      Params:         0       0       0       0       0
  1250 ;;      Locals:         1       0       0       0       0
  1251 ;;      Temps:          2       0       0       0       0
  1252 ;;      Totals:         3       0       0       0       0
  1253 ;;Total ram usage:        3 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    1
  1256 ;; This function calls:
  1257 ;;		_Lcd_Port
  1258 ;; This function is called by:
  1259 ;;		_Lcd_Clear
  1260 ;;		_Lcd_Set_Cursor
  1261 ;;		_Lcd_Init
  1262 ;;		_Lcd_Shift_Right
  1263 ;;		_Lcd_Shift_Left
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           
  1268                           ;psect for function _Lcd_Cmd
  1269  05ED                     _Lcd_Cmd:	
  1270                           
  1271                           ;incstack = 0
  1272                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1273                           ;Lcd_Cmd@a stored from wreg
  1274  05ED  00F3               	movwf	Lcd_Cmd@a
  1275                           
  1276                           ;lcd.h: 40: RB7 = 0;
  1277  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  1278  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  1279  05F0  1386               	bcf	6,7	;volatile
  1280                           
  1281                           ;lcd.h: 41: Lcd_Port(a);
  1282  05F1  0873               	movf	Lcd_Cmd@a,w
  1283  05F2  120A  118A  25D3  120A  118A  	fcall	_Lcd_Port
  1284                           
  1285                           ;lcd.h: 42: RB6 = 1;
  1286  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  1287  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  1288  05F9  1706               	bsf	6,6	;volatile
  1289                           
  1290                           ;lcd.h: 43: _delay((unsigned long)((4)*(20000000/4000.0)));
  1291  05FA  301A               	movlw	26
  1292  05FB  00F2               	movwf	??_Lcd_Cmd+1
  1293  05FC  30F8               	movlw	248
  1294  05FD  00F1               	movwf	??_Lcd_Cmd
  1295  05FE                     u397:	
  1296  05FE  0BF1               	decfsz	??_Lcd_Cmd,f
  1297  05FF  2DFE               	goto	u397
  1298  0600  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1299  0601  2DFE               	goto	u397
  1300  0602  0000               	nop
  1301                           
  1302                           ;lcd.h: 44: RB6 = 0;
  1303  0603  1283               	bcf	3,5	;RP0=0, select bank0
  1304  0604  1303               	bcf	3,6	;RP1=0, select bank0
  1305  0605  1306               	bcf	6,6	;volatile
  1306  0606  0008               	return
  1307  0607                     __end_of_Lcd_Cmd:	
  1308                           
  1309                           	psect	text9
  1310  05D3                     __ptext9:	
  1311 ;; *************** function _Lcd_Port *****************
  1312 ;; Defined at:
  1313 ;;		line 16 in file "lcd.h"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  a               1    wreg     unsigned char 
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;  a               1    0[COMMON] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1327 ;;      Params:         0       0       0       0       0
  1328 ;;      Locals:         1       0       0       0       0
  1329 ;;      Temps:          0       0       0       0       0
  1330 ;;      Totals:         1       0       0       0       0
  1331 ;;Total ram usage:        1 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; This function calls:
  1334 ;;		Nothing
  1335 ;; This function is called by:
  1336 ;;		_Lcd_Cmd
  1337 ;;		_Lcd_Init
  1338 ;;		_Lcd_Write_Char
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           
  1343                           ;psect for function _Lcd_Port
  1344  05D3                     _Lcd_Port:	
  1345                           
  1346                           ;incstack = 0
  1347                           ; Regs used in _Lcd_Port: [wreg]
  1348                           ;Lcd_Port@a stored from wreg
  1349  05D3  00F0               	movwf	Lcd_Port@a
  1350                           
  1351                           ;lcd.h: 18: if(a & 1)
  1352  05D4  1C70               	btfss	Lcd_Port@a,0
  1353  05D5  2DDA               	goto	l19
  1354                           
  1355                           ;lcd.h: 19: RB5 = 1;
  1356  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1357  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  1358  05D8  1686               	bsf	6,5	;volatile
  1359  05D9  2DDD               	goto	l20
  1360  05DA                     l19:	
  1361                           
  1362                           ;lcd.h: 20: else
  1363                           ;lcd.h: 21: RB5 = 0;
  1364  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  1365  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  1366  05DC  1286               	bcf	6,5	;volatile
  1367  05DD                     l20:	
  1368                           
  1369                           ;lcd.h: 23: if(a & 2)
  1370  05DD  1CF0               	btfss	Lcd_Port@a,1
  1371  05DE  2DE1               	goto	l21
  1372                           
  1373                           ;lcd.h: 24: RB4 = 1;
  1374  05DF  1606               	bsf	6,4	;volatile
  1375  05E0  2DE2               	goto	l22
  1376  05E1                     l21:	
  1377                           
  1378                           ;lcd.h: 25: else
  1379                           ;lcd.h: 26: RB4 = 0;
  1380  05E1  1206               	bcf	6,4	;volatile
  1381  05E2                     l22:	
  1382                           
  1383                           ;lcd.h: 28: if(a & 4)
  1384  05E2  1D70               	btfss	Lcd_Port@a,2
  1385  05E3  2DE6               	goto	l23
  1386                           
  1387                           ;lcd.h: 29: RB3 = 1;
  1388  05E4  1586               	bsf	6,3	;volatile
  1389  05E5  2DE7               	goto	l24
  1390  05E6                     l23:	
  1391                           
  1392                           ;lcd.h: 30: else
  1393                           ;lcd.h: 31: RB3 = 0;
  1394  05E6  1186               	bcf	6,3	;volatile
  1395  05E7                     l24:	
  1396                           
  1397                           ;lcd.h: 33: if(a & 8)
  1398  05E7  1DF0               	btfss	Lcd_Port@a,3
  1399  05E8  2DEB               	goto	l25
  1400                           
  1401                           ;lcd.h: 34: RB2 = 1;
  1402  05E9  1506               	bsf	6,2	;volatile
  1403  05EA  0008               	return
  1404  05EB                     l25:	
  1405                           
  1406                           ;lcd.h: 35: else
  1407                           ;lcd.h: 36: RB2 = 0;
  1408  05EB  1106               	bcf	6,2	;volatile
  1409  05EC  0008               	return
  1410  05ED                     __end_of_Lcd_Port:	
  1411  007E                     btemp	set	126	;btemp
  1412  007E                     wtemp0	set	126


Data Sizes:
    Strings     67
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      2       2
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 18
		 -> STR_5(CODE[18]), STR_4(CODE[10]), STR_3(CODE[13]), STR_2(CODE[10]), 
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1899
                                             11 COMMON     3     3      0
                                              0 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     403
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     698
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      2       2       5        2.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Mar 23 00:22:04 2017

                        pc 0002                __CFG_CP$OFF 0000                         l20 05DD  
                       l21 05E1                         l22 05E2                         l23 05E6  
                       l24 05E7                         l25 05EB                         l19 05DA  
                       fsr 0004                        l801 078A                        l823 07D5  
                      l815 07B4                        l729 0687                        l809 07AB  
                      l755 060A                        l765 0710                        _RB2 0032  
                      _RB3 0033                        _RB4 0034                        _RB5 0035  
                      _RB6 0036                        _RB7 0037                        u215 066E  
                      u235 0693                        u307 0765                        u317 0790  
                      u327 07BA                        u337 07F4               __CFG_CPD$OFF 0000  
                      u347 064A                        u195 063A                        u357 065B  
                      u367 06B6                        u377 06C5                        u297 0737  
                      u387 06D4                        u397 05FE                        fsr0 0004  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       STR_1 001B  
                     STR_2 0038                       STR_3 002B                       STR_4 0042  
                     STR_5 0009               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070  
                     _main 0708                       btemp 007E              __CFG_BOREN$ON 0000  
                     start 0000         ??_Lcd_Write_String 0075            __end_of_Lcd_Cmd 0607  
                    ?_main 0070              __CFG_WDTE$OFF 0000    __size_of_Lcd_Set_Cursor 004A  
                    _TRISB 0086    __size_of_Lcd_Shift_Left 000B                      main@a 0020  
                    pclath 000A                      status 0003                      wtemp0 007E  
         __end_of_Lcd_Init 0708           __end_of_Lcd_Port 05ED            __initialization 07FC  
             __end_of_main 07FC                     ??_main 007B         __size_of_Lcd_Clear 000B  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039             __CFG_PWRTE$OFF 0000  
 __size_of_Lcd_Shift_Right 000B            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC  
        __end_of_Lcd_Clear 05BD             __pcstackCOMMON 0070             _Lcd_Set_Cursor 0662  
           _Lcd_Shift_Left 05BD                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
               __pmaintext 0708  __size_of_Lcd_Write_String 0022     __end_of_Lcd_Set_Cursor 06AC  
   __end_of_Lcd_Shift_Left 05C8          ??_Lcd_Shift_Right 0074                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0003             _Lcd_Write_Char 0629  
                  _Lcd_Cmd 05ED            ?_Lcd_Set_Cursor 0074                    __ptext1 0607  
                  __ptext2 0629                    __ptext3 05C8                    __ptext4 05BD  
                  __ptext5 0662                    __ptext6 06AC                    __ptext7 05B2  
                  __ptext8 05ED                    __ptext9 05D3            ?_Lcd_Shift_Left 0070  
   __end_of_Lcd_Write_Char 0662       end_of_initialization 07FC                  Lcd_Port@a 0070  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077          Lcd_Write_String@i 0075  
                _Lcd_Clear 05B2           _Lcd_Write_String 0607        start_initialization 07FC  
        __size_of_Lcd_Init 005C          __size_of_Lcd_Port 001A                 ?_Lcd_Clear 0070  
          _Lcd_Shift_Right 05C8            Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073  
                ___latbits 0002              __pcstackBANK0 0020                   ?_Lcd_Cmd 0070  
         ??_Lcd_Set_Cursor 0075           ??_Lcd_Shift_Left 0074                  __pstrings 0003  
  __end_of_Lcd_Shift_Right 05D3                   Lcd_Cmd@a 0073                ??_Lcd_Clear 0074  
              __stringbase 0008           ??_Lcd_Write_Char 0071                   _Lcd_Init 06AC  
                 _Lcd_Port 05D3   __end_of_Lcd_Write_String 0629           __size_of_Lcd_Cmd 001A  
       __end_of__stringtab 0009              __size_of_main 00F4           ?_Lcd_Shift_Right 0070  
       Lcd_Write_Char@temp 0072                  stringcode 0003         Lcd_Set_Cursor@temp 007A  
                 stringdir 0003                   stringtab 0003  
