

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Mar 23 08:20:09 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.41
    29                           ; Generated 25/01/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F877A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122                           
   123                           	psect	strings
   124  0225                     __pstrings:	
   125  0225                     stringtab:	
   126  0225                     __stringtab:	
   127                           
   128                           ;	String table - string pointers are 1 byte each
   129  0225  1BFF               	btfsc	btemp+1,7
   130  0226  2A2F               	ljmp	stringcode
   131  0227  1383               	bcf	3,7
   132  0228  187F               	btfsc	btemp+1,0
   133  0229  1783               	bsf	3,7
   134  022A  0800               	movf	0,w
   135  022B  0A84               	incf	4,f
   136  022C  1903               	skipnz
   137  022D  0AFF               	incf	btemp+1,f
   138  022E  0008               	return
   139  022F                     stringcode:	
   140  022F                     stringdir:	
   141  022F  3002               	movlw	high stringdir
   142  0230  008A               	movwf	10
   143  0231  0804               	movf	4,w
   144  0232  0A84               	incf	4,f
   145  0233  0782               	addwf	2,f
   146  0234                     __stringbase:	
   147  0234  3400               	retlw	0
   148  0235                     __end_of__stringtab:	
   149  0235                     _dpowers:	
   150  0235  3401               	retlw	1
   151  0236  3400               	retlw	0
   152  0237  340A               	retlw	10
   153  0238  3400               	retlw	0
   154  0239  3464               	retlw	100
   155  023A  3400               	retlw	0
   156  023B  34E8               	retlw	232
   157  023C  3403               	retlw	3
   158  023D  3410               	retlw	16
   159  023E  3427               	retlw	39
   160  023F                     __end_of_dpowers:	
   161  000B                     _INTCON	set	11
   162  005F                     _GIE	set	95
   163  005D                     _T0IE	set	93
   164  005A                     _T0IF	set	90
   165  005C                     _INTE	set	92
   166  0059                     _INTF	set	89
   167  0036                     _RB6	set	54
   168  0037                     _RB7	set	55
   169  0032                     _RB2	set	50
   170  0033                     _RB3	set	51
   171  0034                     _RB4	set	52
   172  0035                     _RB5	set	53
   173  0081                     _OPTION_REG	set	129
   174  0086                     _TRISB	set	134
   175  023F                     STR_5:	
   176  023F  3477               	retlw	119	;'w'
   177  0240  3477               	retlw	119	;'w'
   178  0241  3477               	retlw	119	;'w'
   179  0242  342E               	retlw	46	;'.'
   180  0243  346A               	retlw	106	;'j'
   181  0244  346F               	retlw	111	;'o'
   182  0245  3463               	retlw	99	;'c'
   183  0246  346C               	retlw	108	;'l'
   184  0247  3465               	retlw	101	;'e'
   185  0248  3474               	retlw	116	;'t'
   186  0249  3465               	retlw	101	;'e'
   187  024A  3463               	retlw	99	;'c'
   188  024B  3468               	retlw	104	;'h'
   189  024C  342E               	retlw	46	;'.'
   190  024D  3463               	retlw	99	;'c'
   191  024E  346F               	retlw	111	;'o'
   192  024F  346D               	retlw	109	;'m'
   193  0250  3400               	retlw	0
   194  0251                     STR_1:	
   195  0251  344C               	retlw	76	;'L'
   196  0252  3443               	retlw	67	;'C'
   197  0253  3444               	retlw	68	;'D'
   198  0254  3420               	retlw	32	;' '
   199  0255  344C               	retlw	76	;'L'
   200  0256  3469               	retlw	105	;'i'
   201  0257  3462               	retlw	98	;'b'
   202  0258  3472               	retlw	114	;'r'
   203  0259  3461               	retlw	97	;'a'
   204  025A  3472               	retlw	114	;'r'
   205  025B  3479               	retlw	121	;'y'
   206  025C  3420               	retlw	32	;' '
   207  025D  3466               	retlw	102	;'f'
   208  025E  346F               	retlw	111	;'o'
   209  025F  3472               	retlw	114	;'r'
   210  0260  3400               	retlw	0
   211  0261                     STR_3:	
   212  0261  3444               	retlw	68	;'D'
   213  0262  3465               	retlw	101	;'e'
   214  0263  3476               	retlw	118	;'v'
   215  0264  3465               	retlw	101	;'e'
   216  0265  346C               	retlw	108	;'l'
   217  0266  346F               	retlw	111	;'o'
   218  0267  3470               	retlw	112	;'p'
   219  0268  3465               	retlw	101	;'e'
   220  0269  3464               	retlw	100	;'d'
   221  026A  3420               	retlw	32	;' '
   222  026B  3442               	retlw	66	;'B'
   223  026C  3479               	retlw	121	;'y'
   224  026D  3400               	retlw	0
   225  026E                     STR_2:	
   226  026E  344D               	retlw	77	;'M'
   227  026F  3450               	retlw	80	;'P'
   228  0270  344C               	retlw	76	;'L'
   229  0271  3441               	retlw	65	;'A'
   230  0272  3442               	retlw	66	;'B'
   231  0273  3420               	retlw	32	;' '
   232  0274  3458               	retlw	88	;'X'
   233  0275  3443               	retlw	67	;'C'
   234  0276  3438               	retlw	56	;'8'
   235  0277  3400               	retlw	0
   236  0278                     STR_4:	
   237  0278  344A               	retlw	74	;'J'
   238  0279  346F               	retlw	111	;'o'
   239  027A  3463               	retlw	99	;'c'
   240  027B  346C               	retlw	108	;'l'
   241  027C  3465               	retlw	101	;'e'
   242  027D  3474               	retlw	116	;'t'
   243  027E  3465               	retlw	101	;'e'
   244  027F  3463               	retlw	99	;'c'
   245  0280  3468               	retlw	104	;'h'
   246  0281  3400               	retlw	0
   247  0282                     STR_6:	
   248  0282  3446               	retlw	70	;'F'
   249  0283  3472               	retlw	114	;'r'
   250  0284  3465               	retlw	101	;'e'
   251  0285  3471               	retlw	113	;'q'
   252  0286  342D               	retlw	45	;'-'
   253  0287  3420               	retlw	32	;' '
   254  0288  3425               	retlw	37	;'%'
   255  0289  3469               	retlw	105	;'i'
   256  028A  3400               	retlw	0
   257                           
   258                           ; #config settings
   259  0000                     
   260                           	psect	cinit
   261  0015                     start_initialization:	
   262  0015                     __initialization:	
   263                           
   264                           ; Clear objects allocated to COMMON
   265  0015  01F9               	clrf	__pbssCOMMON& (0+127)
   266                           
   267                           ; Clear objects allocated to BANK0
   268  0016  1383               	bcf	3,7	;select IRP bank0
   269  0017  3020               	movlw	low __pbssBANK0
   270  0018  0084               	movwf	4
   271  0019  3044               	movlw	low (__pbssBANK0+36)
   272  001A  120A  118A  24A7   	fcall	clear_ram0
   273  001D                     end_of_initialization:	
   274                           ;End of C runtime variable initialization code
   275                           
   276  001D                     __end_of__initialization:	
   277  001D  0183               	clrf	3
   278  001E  120A  118A  2821   	ljmp	_main	;jump to C main() function
   279                           
   280                           	psect	bssCOMMON
   281  0079                     __pbssCOMMON:	
   282  0079                     _i:	
   283  0079                     	ds	1
   284                           
   285                           	psect	bssBANK0
   286  0020                     __pbssBANK0:	
   287  0020                     _str:	
   288  0020                     	ds	10
   289  002A                     _pulseCounter:	
   290  002A                     	ds	4
   291  002E                     _timerCounterOverflow:	
   292  002E                     	ds	2
   293  0030                     _freqString:	
   294  0030                     	ds	20
   295                           
   296                           	psect	clrtext
   297  04A7                     clear_ram0:	
   298                           ;	Called with FSR containing the base address, and
   299                           ;	W with the last address+1
   300                           
   301  04A7  0064               	clrwdt	;clear the watchdog before getting into this loop
   302  04A8                     clrloop0:	
   303  04A8  0180               	clrf	0	;clear RAM location pointed to by FSR
   304  04A9  0A84               	incf	4,f	;increment pointer
   305  04AA  0604               	xorwf	4,w	;XOR with final address
   306  04AB  1903               	btfsc	3,2	;have we reached the end yet?
   307  04AC  3400               	retlw	0	;all done for this memory range, return
   308  04AD  0604               	xorwf	4,w	;XOR again to restore value
   309  04AE  2CA8               	goto	clrloop0	;do the next byte
   310                           
   311                           	psect	cstackCOMMON
   312  0070                     __pcstackCOMMON:	
   313  0070                     ?_Lcd_Port:	
   314  0070                     ?_Lcd_Cmd:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_Lcd_Init:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_Lcd_Write_Char:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ?_Lcd_Shift_Right:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_Lcd_Shift_Left:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ?_ISR:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ??_ISR:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_Lcd_Clear:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_main:	
   339                           ; 2 bytes @ 0x0
   340                           
   341                           
   342                           ; 2 bytes @ 0x0
   343  0070                     	ds	4
   344  0074                     ??_Lcd_Port:	
   345  0074                     ?___lwdiv:	
   346                           ; 1 bytes @ 0x4
   347                           
   348  0074                     Lcd_Port@a:	
   349                           ; 2 bytes @ 0x4
   350                           
   351  0074                     ___lwdiv@divisor:	
   352                           ; 1 bytes @ 0x4
   353                           
   354                           
   355                           ; 2 bytes @ 0x4
   356  0074                     	ds	1
   357  0075                     ??_Lcd_Cmd:	
   358  0075                     ??_Lcd_Write_Char:	
   359                           ; 1 bytes @ 0x5
   360                           
   361                           
   362                           ; 1 bytes @ 0x5
   363  0075                     	ds	1
   364  0076                     Lcd_Write_Char@temp:	
   365  0076                     ___lwdiv@dividend:	
   366                           ; 1 bytes @ 0x6
   367                           
   368                           
   369                           ; 2 bytes @ 0x6
   370  0076                     	ds	1
   371  0077                     Lcd_Cmd@a:	
   372  0077                     Lcd_Write_Char@y:	
   373                           ; 1 bytes @ 0x7
   374                           
   375                           
   376                           ; 1 bytes @ 0x7
   377  0077                     	ds	1
   378  0078                     ??_Lcd_Clear:	
   379  0078                     ?_Lcd_Set_Cursor:	
   380                           ; 1 bytes @ 0x8
   381                           
   382  0078                     ??_Lcd_Shift_Right:	
   383                           ; 1 bytes @ 0x8
   384                           
   385  0078                     ??_Lcd_Shift_Left:	
   386                           ; 1 bytes @ 0x8
   387                           
   388  0078                     ??___lwdiv:	
   389                           ; 1 bytes @ 0x8
   390                           
   391  0078                     Lcd_Set_Cursor@b:	
   392                           ; 1 bytes @ 0x8
   393                           
   394  0078                     Lcd_Write_Char@a:	
   395                           ; 1 bytes @ 0x8
   396                           
   397                           
   398                           ; 1 bytes @ 0x8
   399  0078                     	ds	1
   400                           
   401                           	psect	cstackBANK0
   402  0044                     __pcstackBANK0:	
   403  0044                     ??_Lcd_Set_Cursor:	
   404  0044                     ??_Lcd_Init:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0044                     ?_Lcd_Write_String:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0044                     Lcd_Write_String@a:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0044                     ___lwdiv@quotient:	
   414                           ; 2 bytes @ 0x0
   415                           
   416                           
   417                           ; 2 bytes @ 0x0
   418  0044                     	ds	2
   419  0046                     ??_Lcd_Write_String:	
   420  0046                     Lcd_Set_Cursor@a:	
   421                           ; 1 bytes @ 0x2
   422                           
   423  0046                     ___lwdiv@counter:	
   424                           ; 1 bytes @ 0x2
   425                           
   426                           
   427                           ; 1 bytes @ 0x2
   428  0046                     	ds	1
   429  0047                     ?___lwmod:	
   430  0047                     Lcd_Set_Cursor@z:	
   431                           ; 2 bytes @ 0x3
   432                           
   433  0047                     ___lwmod@divisor:	
   434                           ; 1 bytes @ 0x3
   435                           
   436                           
   437                           ; 2 bytes @ 0x3
   438  0047                     	ds	1
   439  0048                     Lcd_Set_Cursor@y:	
   440                           
   441                           ; 1 bytes @ 0x4
   442  0048                     	ds	1
   443  0049                     Lcd_Set_Cursor@temp:	
   444  0049                     Lcd_Write_String@i:	
   445                           ; 1 bytes @ 0x5
   446                           
   447  0049                     ___lwmod@dividend:	
   448                           ; 2 bytes @ 0x5
   449                           
   450                           
   451                           ; 2 bytes @ 0x5
   452  0049                     	ds	2
   453  004B                     ??___lwmod:	
   454                           
   455                           ; 1 bytes @ 0x7
   456  004B                     	ds	1
   457  004C                     ___lwmod@counter:	
   458                           
   459                           ; 1 bytes @ 0x8
   460  004C                     	ds	1
   461  004D                     ?_sprintf:	
   462  004D                     sprintf@f:	
   463                           ; 2 bytes @ 0x9
   464                           
   465                           
   466                           ; 1 bytes @ 0x9
   467  004D                     	ds	5
   468  0052                     ??_sprintf:	
   469                           
   470                           ; 1 bytes @ 0xE
   471  0052                     	ds	3
   472  0055                     sprintf@ap:	
   473                           
   474                           ; 1 bytes @ 0x11
   475  0055                     	ds	1
   476  0056                     sprintf@flag:	
   477                           
   478                           ; 1 bytes @ 0x12
   479  0056                     	ds	1
   480  0057                     sprintf@prec:	
   481                           
   482                           ; 1 bytes @ 0x13
   483  0057                     	ds	1
   484  0058                     sprintf@val:	
   485                           
   486                           ; 2 bytes @ 0x14
   487  0058                     	ds	2
   488  005A                     sprintf@sp:	
   489                           
   490                           ; 1 bytes @ 0x16
   491  005A                     	ds	1
   492  005B                     sprintf@c:	
   493                           
   494                           ; 1 bytes @ 0x17
   495  005B                     	ds	1
   496  005C                     ??_main:	
   497                           
   498                           ; 1 bytes @ 0x18
   499  005C                     	ds	3
   500  005F                     main@shiftPosition:	
   501                           
   502                           ; 2 bytes @ 0x1B
   503  005F                     	ds	2
   504                           
   505                           	psect	maintext
   506  0021                     __pmaintext:	
   507 ;;
   508 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   509 ;;
   510 ;; *************** function _main *****************
   511 ;; Defined at:
   512 ;;		line 48 in file "FreqMeter.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;		None
   515 ;; Auto vars:     Size  Location     Type
   516 ;;  shiftPositio    2   27[BANK0 ] unsigned int 
   517 ;; Return value:  Size  Location     Type
   518 ;;                  2   91[None  ] int 
   519 ;; Registers used:
   520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : B00/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   526 ;;      Params:         0       0       0       0       0
   527 ;;      Locals:         0       2       0       0       0
   528 ;;      Temps:          0       3       0       0       0
   529 ;;      Totals:         0       5       0       0       0
   530 ;;Total ram usage:        5 bytes
   531 ;; Hardware stack levels required when called:    4
   532 ;; This function calls:
   533 ;;		_Lcd_Clear
   534 ;;		_Lcd_Init
   535 ;;		_Lcd_Set_Cursor
   536 ;;		_Lcd_Shift_Left
   537 ;;		_Lcd_Shift_Right
   538 ;;		_Lcd_Write_String
   539 ;;		_sprintf
   540 ;; This function is called by:
   541 ;;		Startup code after reset
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           
   546                           ;psect for function _main
   547  0021                     _main:	
   548                           
   549                           ;FreqMeter.c: 49: unsigned int shiftPosition;
   550                           ;FreqMeter.c: 50: TRISB = 0x01;
   551                           
   552                           ;incstack = 0
   553                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   554  0021  3001               	movlw	1
   555  0022  1683               	bsf	3,5	;RP0=1, select bank1
   556  0023  1303               	bcf	3,6	;RP1=0, select bank1
   557  0024  0086               	movwf	6	;volatile
   558                           
   559                           ;FreqMeter.c: 51: OPTION_REG = 0b11011000;
   560  0025  30D8               	movlw	216
   561  0026  0081               	movwf	1	;volatile
   562                           
   563                           ;FreqMeter.c: 52: Lcd_Init();
   564  0027  120A  118A  228B  120A  118A  	fcall	_Lcd_Init
   565                           
   566                           ;FreqMeter.c: 53: Lcd_Clear();
   567  002C  120A  118A  249C  120A  118A  	fcall	_Lcd_Clear
   568                           
   569                           ;FreqMeter.c: 54: Lcd_Set_Cursor(1, 1);
   570  0031  01F8               	clrf	Lcd_Set_Cursor@b
   571  0032  0AF8               	incf	Lcd_Set_Cursor@b,f
   572  0033  3001               	movlw	1
   573  0034  120A  118A  22EC  120A  118A  	fcall	_Lcd_Set_Cursor
   574                           
   575                           ;FreqMeter.c: 55: Lcd_Write_String("LCD Library for");
   576  0039  301D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   577  003A  1283               	bcf	3,5	;RP0=0, select bank0
   578  003B  1303               	bcf	3,6	;RP1=0, select bank0
   579  003C  00C4               	movwf	Lcd_Write_String@a
   580  003D  3080               	movlw	128
   581  003E  00C5               	movwf	Lcd_Write_String@a+1
   582  003F  120A  118A  233E  120A  118A  	fcall	_Lcd_Write_String
   583                           
   584                           ;FreqMeter.c: 56: Lcd_Set_Cursor(2, 1);
   585  0044  01F8               	clrf	Lcd_Set_Cursor@b
   586  0045  0AF8               	incf	Lcd_Set_Cursor@b,f
   587  0046  3002               	movlw	2
   588  0047  120A  118A  22EC  120A  118A  	fcall	_Lcd_Set_Cursor
   589                           
   590                           ;FreqMeter.c: 57: Lcd_Write_String("MPLAB XC8");
   591  004C  303A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   592  004D  1283               	bcf	3,5	;RP0=0, select bank0
   593  004E  1303               	bcf	3,6	;RP1=0, select bank0
   594  004F  00C4               	movwf	Lcd_Write_String@a
   595  0050  3080               	movlw	128
   596  0051  00C5               	movwf	Lcd_Write_String@a+1
   597  0052  120A  118A  233E  120A  118A  	fcall	_Lcd_Write_String
   598                           
   599                           ;FreqMeter.c: 58: _delay((unsigned long)((2000)*(20000000/4000.0)));
   600  0057  3033               	movlw	51
   601  0058  1283               	bcf	3,5	;RP0=0, select bank0
   602  0059  1303               	bcf	3,6	;RP1=0, select bank0
   603  005A  00DE               	movwf	??_main+2
   604  005B  30BB               	movlw	187
   605  005C  00DD               	movwf	??_main+1
   606  005D  30DF               	movlw	223
   607  005E  00DC               	movwf	??_main
   608  005F                     u1047:	
   609  005F  0BDC               	decfsz	??_main,f
   610  0060  285F               	goto	u1047
   611  0061  0BDD               	decfsz	??_main+1,f
   612  0062  285F               	goto	u1047
   613  0063  0BDE               	decfsz	??_main+2,f
   614  0064  285F               	goto	u1047
   615                           
   616                           ;FreqMeter.c: 59: Lcd_Clear();
   617  0065  120A  118A  249C  120A  118A  	fcall	_Lcd_Clear
   618                           
   619                           ;FreqMeter.c: 60: Lcd_Set_Cursor(1, 1);
   620  006A  01F8               	clrf	Lcd_Set_Cursor@b
   621  006B  0AF8               	incf	Lcd_Set_Cursor@b,f
   622  006C  3001               	movlw	1
   623  006D  120A  118A  22EC  120A  118A  	fcall	_Lcd_Set_Cursor
   624                           
   625                           ;FreqMeter.c: 61: Lcd_Write_String("Developed By");
   626  0072  302D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   627  0073  1283               	bcf	3,5	;RP0=0, select bank0
   628  0074  1303               	bcf	3,6	;RP1=0, select bank0
   629  0075  00C4               	movwf	Lcd_Write_String@a
   630  0076  3080               	movlw	128
   631  0077  00C5               	movwf	Lcd_Write_String@a+1
   632  0078  120A  118A  233E  120A  118A  	fcall	_Lcd_Write_String
   633                           
   634                           ;FreqMeter.c: 62: Lcd_Set_Cursor(2, 1);
   635  007D  01F8               	clrf	Lcd_Set_Cursor@b
   636  007E  0AF8               	incf	Lcd_Set_Cursor@b,f
   637  007F  3002               	movlw	2
   638  0080  120A  118A  22EC  120A  118A  	fcall	_Lcd_Set_Cursor
   639                           
   640                           ;FreqMeter.c: 63: Lcd_Write_String("Jocletech");
   641  0085  3044               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   642  0086  1283               	bcf	3,5	;RP0=0, select bank0
   643  0087  1303               	bcf	3,6	;RP1=0, select bank0
   644  0088  00C4               	movwf	Lcd_Write_String@a
   645  0089  3080               	movlw	128
   646  008A  00C5               	movwf	Lcd_Write_String@a+1
   647  008B  120A  118A  233E  120A  118A  	fcall	_Lcd_Write_String
   648                           
   649                           ;FreqMeter.c: 64: _delay((unsigned long)((2000)*(20000000/4000.0)));
   650  0090  3033               	movlw	51
   651  0091  1283               	bcf	3,5	;RP0=0, select bank0
   652  0092  1303               	bcf	3,6	;RP1=0, select bank0
   653  0093  00DE               	movwf	??_main+2
   654  0094  30BB               	movlw	187
   655  0095  00DD               	movwf	??_main+1
   656  0096  30DF               	movlw	223
   657  0097  00DC               	movwf	??_main
   658  0098                     u1057:	
   659  0098  0BDC               	decfsz	??_main,f
   660  0099  2898               	goto	u1057
   661  009A  0BDD               	decfsz	??_main+1,f
   662  009B  2898               	goto	u1057
   663  009C  0BDE               	decfsz	??_main+2,f
   664  009D  2898               	goto	u1057
   665                           
   666                           ;FreqMeter.c: 65: Lcd_Clear();
   667  009E  120A  118A  249C  120A  118A  	fcall	_Lcd_Clear
   668                           
   669                           ;FreqMeter.c: 66: Lcd_Set_Cursor(1, 1);
   670  00A3  01F8               	clrf	Lcd_Set_Cursor@b
   671  00A4  0AF8               	incf	Lcd_Set_Cursor@b,f
   672  00A5  3001               	movlw	1
   673  00A6  120A  118A  22EC  120A  118A  	fcall	_Lcd_Set_Cursor
   674                           
   675                           ;FreqMeter.c: 67: Lcd_Write_String("www.jocletech.com");
   676  00AB  300B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   677  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   678  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   679  00AE  00C4               	movwf	Lcd_Write_String@a
   680  00AF  3080               	movlw	128
   681  00B0  00C5               	movwf	Lcd_Write_String@a+1
   682  00B1  120A  118A  233E  120A  118A  	fcall	_Lcd_Write_String
   683                           
   684                           ;FreqMeter.c: 69: for (shiftPosition = 0; shiftPosition < 15; shiftPosition++) {
   685  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   686  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   687  00B8  01DF               	clrf	main@shiftPosition
   688  00B9  01E0               	clrf	main@shiftPosition+1
   689  00BA  3000               	movlw	0
   690  00BB  0260               	subwf	main@shiftPosition+1,w
   691  00BC  300F               	movlw	15
   692  00BD  1903               	skipnz
   693  00BE  025F               	subwf	main@shiftPosition,w
   694  00BF  1803               	btfsc	3,0
   695  00C0  28E3               	goto	l1266
   696  00C1                     l1258:	
   697                           
   698                           ;FreqMeter.c: 70: _delay((unsigned long)((300)*(20000000/4000.0)));
   699  00C1  3008               	movlw	8
   700  00C2  1283               	bcf	3,5	;RP0=0, select bank0
   701  00C3  1303               	bcf	3,6	;RP1=0, select bank0
   702  00C4  00DE               	movwf	??_main+2
   703  00C5  309D               	movlw	157
   704  00C6  00DD               	movwf	??_main+1
   705  00C7  3005               	movlw	5
   706  00C8  00DC               	movwf	??_main
   707  00C9                     u1067:	
   708  00C9  0BDC               	decfsz	??_main,f
   709  00CA  28C9               	goto	u1067
   710  00CB  0BDD               	decfsz	??_main+1,f
   711  00CC  28C9               	goto	u1067
   712  00CD  0BDE               	decfsz	??_main+2,f
   713  00CE  28C9               	goto	u1067
   714                           
   715                           ;FreqMeter.c: 71: Lcd_Shift_Left();
   716  00CF  120A  118A  2491  120A  118A  	fcall	_Lcd_Shift_Left
   717  00D4  3001               	movlw	1
   718  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   719  00D6  1303               	bcf	3,6	;RP1=0, select bank0
   720  00D7  07DF               	addwf	main@shiftPosition,f
   721  00D8  1803               	skipnc
   722  00D9  0AE0               	incf	main@shiftPosition+1,f
   723  00DA  3000               	movlw	0
   724  00DB  07E0               	addwf	main@shiftPosition+1,f
   725  00DC  3000               	movlw	0
   726  00DD  0260               	subwf	main@shiftPosition+1,w
   727  00DE  300F               	movlw	15
   728  00DF  1903               	skipnz
   729  00E0  025F               	subwf	main@shiftPosition,w
   730  00E1  1C03               	skipc
   731  00E2  28C1               	goto	l1258
   732  00E3                     l1266:	
   733                           
   734                           ;FreqMeter.c: 72: }
   735                           ;FreqMeter.c: 74: for (shiftPosition = 0; shiftPosition < 15; shiftPosition++) {
   736  00E3  01DF               	clrf	main@shiftPosition
   737  00E4  01E0               	clrf	main@shiftPosition+1
   738  00E5  3000               	movlw	0
   739  00E6  0260               	subwf	main@shiftPosition+1,w
   740  00E7  300F               	movlw	15
   741  00E8  1903               	skipnz
   742  00E9  025F               	subwf	main@shiftPosition,w
   743  00EA  1803               	btfsc	3,0
   744  00EB  290E               	goto	l1280
   745  00EC                     l1272:	
   746                           
   747                           ;FreqMeter.c: 75: _delay((unsigned long)((300)*(20000000/4000.0)));
   748  00EC  3008               	movlw	8
   749  00ED  1283               	bcf	3,5	;RP0=0, select bank0
   750  00EE  1303               	bcf	3,6	;RP1=0, select bank0
   751  00EF  00DE               	movwf	??_main+2
   752  00F0  309D               	movlw	157
   753  00F1  00DD               	movwf	??_main+1
   754  00F2  3005               	movlw	5
   755  00F3  00DC               	movwf	??_main
   756  00F4                     u1077:	
   757  00F4  0BDC               	decfsz	??_main,f
   758  00F5  28F4               	goto	u1077
   759  00F6  0BDD               	decfsz	??_main+1,f
   760  00F7  28F4               	goto	u1077
   761  00F8  0BDE               	decfsz	??_main+2,f
   762  00F9  28F4               	goto	u1077
   763                           
   764                           ;FreqMeter.c: 76: Lcd_Shift_Right();
   765  00FA  120A  118A  2486  120A  118A  	fcall	_Lcd_Shift_Right
   766  00FF  3001               	movlw	1
   767  0100  1283               	bcf	3,5	;RP0=0, select bank0
   768  0101  1303               	bcf	3,6	;RP1=0, select bank0
   769  0102  07DF               	addwf	main@shiftPosition,f
   770  0103  1803               	skipnc
   771  0104  0AE0               	incf	main@shiftPosition+1,f
   772  0105  3000               	movlw	0
   773  0106  07E0               	addwf	main@shiftPosition+1,f
   774  0107  3000               	movlw	0
   775  0108  0260               	subwf	main@shiftPosition+1,w
   776  0109  300F               	movlw	15
   777  010A  1903               	skipnz
   778  010B  025F               	subwf	main@shiftPosition,w
   779  010C  1C03               	skipc
   780  010D  28EC               	goto	l1272
   781  010E                     l1280:	
   782                           ;FreqMeter.c: 77: }
   783                           ;FreqMeter.c: 79: while (1) {
   784                           
   785                           
   786                           ;FreqMeter.c: 80: INTCON = 0b10110000;
   787  010E  30B0               	movlw	176
   788  010F  008B               	movwf	11	;volatile
   789                           
   790                           ;FreqMeter.c: 81: pulseCounter = 0;
   791  0110  3000               	movlw	0
   792  0111  1283               	bcf	3,5	;RP0=0, select bank0
   793  0112  1303               	bcf	3,6	;RP1=0, select bank0
   794  0113  00AD               	movwf	_pulseCounter+3
   795  0114  3000               	movlw	0
   796  0115  00AC               	movwf	_pulseCounter+2
   797  0116  3000               	movlw	0
   798  0117  00AB               	movwf	_pulseCounter+1
   799  0118  3000               	movlw	0
   800  0119  00AA               	movwf	_pulseCounter
   801                           
   802                           ;FreqMeter.c: 82: timerCounterOverflow = 0;
   803  011A  01AE               	clrf	_timerCounterOverflow
   804  011B  01AF               	clrf	_timerCounterOverflow+1
   805  011C                     l1284:	
   806                           ;FreqMeter.c: 83: while (timerCounterOverflow < 19532);
   807                           
   808  011C  304C               	movlw	76
   809  011D  022F               	subwf	_timerCounterOverflow+1,w
   810  011E  304C               	movlw	76
   811  011F  1903               	skipnz
   812  0120  022E               	subwf	_timerCounterOverflow,w
   813  0121  1C03               	skipc
   814  0122  291C               	goto	l1284
   815                           
   816                           ;FreqMeter.c: 84: GIE = 0;
   817  0123  138B               	bcf	11,7	;volatile
   818                           
   819                           ;FreqMeter.c: 85: sprintf(freqString, "Freq- %i", pulseCounter);
   820  0124  304E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   821  0125  00DC               	movwf	??_main
   822  0126  085C               	movf	??_main,w
   823  0127  00CD               	movwf	sprintf@f
   824  0128  082D               	movf	_pulseCounter+3,w
   825  0129  00D1               	movwf	?_sprintf+4
   826  012A  082C               	movf	_pulseCounter+2,w
   827  012B  00D0               	movwf	?_sprintf+3
   828  012C  082B               	movf	_pulseCounter+1,w
   829  012D  00CF               	movwf	?_sprintf+2
   830  012E  082A               	movf	_pulseCounter,w
   831  012F  00CE               	movwf	?_sprintf+1
   832  0130  3030               	movlw	(low (_freqString| 0))& (0+255)
   833  0131  120A  118A  214F  120A  118A  	fcall	_sprintf
   834                           
   835                           ;FreqMeter.c: 86: Lcd_Clear();
   836  0136  120A  118A  249C  120A  118A  	fcall	_Lcd_Clear
   837                           
   838                           ;FreqMeter.c: 87: Lcd_Set_Cursor(1, 1);
   839  013B  01F8               	clrf	Lcd_Set_Cursor@b
   840  013C  0AF8               	incf	Lcd_Set_Cursor@b,f
   841  013D  3001               	movlw	1
   842  013E  120A  118A  22EC  120A  118A  	fcall	_Lcd_Set_Cursor
   843                           
   844                           ;FreqMeter.c: 88: Lcd_Write_String(freqString);
   845  0143  3030               	movlw	(low (_freqString| 0))& (0+255)
   846  0144  1283               	bcf	3,5	;RP0=0, select bank0
   847  0145  1303               	bcf	3,6	;RP1=0, select bank0
   848  0146  00C4               	movwf	Lcd_Write_String@a
   849  0147  3000               	movlw	0
   850  0148  00C5               	movwf	Lcd_Write_String@a+1
   851  0149  120A  118A  233E  120A  118A  	fcall	_Lcd_Write_String
   852  014E  290E               	goto	l1280
   853  014F                     __end_of_main:	
   854                           ;FreqMeter.c: 89: }
   855                           ;FreqMeter.c: 90: return 0;
   856                           ;	Return value of _main is never used
   857                           
   858                           
   859                           	psect	text1
   860  014F                     __ptext1:	
   861 ;; *************** function _sprintf *****************
   862 ;; Defined at:
   863 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  sp              1    wreg     PTR unsigned char 
   866 ;;		 -> freqString(20), 
   867 ;;  f               1    9[BANK0 ] PTR const unsigned char 
   868 ;;		 -> STR_6(9), 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  sp              1   22[BANK0 ] PTR unsigned char 
   871 ;;		 -> freqString(20), 
   872 ;;  tmpval          4    0        struct .
   873 ;;  val             2   20[BANK0 ] unsigned int 
   874 ;;  cp              2    0        PTR const unsigned char 
   875 ;;  len             2    0        unsigned int 
   876 ;;  c               1   23[BANK0 ] char 
   877 ;;  prec            1   19[BANK0 ] char 
   878 ;;  flag            1   18[BANK0 ] unsigned char 
   879 ;;  ap              1   17[BANK0 ] PTR void [1]
   880 ;;		 -> ?_sprintf(2), 
   881 ;; Return value:  Size  Location     Type
   882 ;;                  2    9[BANK0 ] int 
   883 ;; Registers used:
   884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   890 ;;      Params:         0       5       0       0       0
   891 ;;      Locals:         0       7       0       0       0
   892 ;;      Temps:          0       3       0       0       0
   893 ;;      Totals:         0      15       0       0       0
   894 ;;Total ram usage:       15 bytes
   895 ;; Hardware stack levels used:    1
   896 ;; Hardware stack levels required when called:    2
   897 ;; This function calls:
   898 ;;		___lwdiv
   899 ;;		___lwmod
   900 ;; This function is called by:
   901 ;;		_main
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           
   906                           ;psect for function _sprintf
   907  014F                     _sprintf:	
   908                           
   909                           ;incstack = 0
   910                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   911                           ;sprintf@sp stored from wreg
   912  014F  1283               	bcf	3,5	;RP0=0, select bank0
   913  0150  1303               	bcf	3,6	;RP1=0, select bank0
   914  0151  00DA               	movwf	sprintf@sp
   915                           
   916                           ;doprnt.c: 494: va_list ap;
   917                           ;doprnt.c: 499: signed char c;
   918                           ;doprnt.c: 506: signed char prec;
   919                           ;doprnt.c: 508: unsigned char flag;
   920                           ;doprnt.c: 523: union {
   921                           ;doprnt.c: 524: unsigned long vd;
   922                           ;doprnt.c: 525: double integ;
   923                           ;doprnt.c: 526: } tmpval;
   924                           ;doprnt.c: 528: unsigned int val;
   925                           ;doprnt.c: 529: unsigned len;
   926                           ;doprnt.c: 530: const char * cp;
   927                           ;doprnt.c: 533: *ap = __va_start();
   928  0152  304E               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   929  0153  00D2               	movwf	??_sprintf
   930  0154  0852               	movf	??_sprintf,w
   931  0155  00D5               	movwf	sprintf@ap
   932  0156                     l1218:	
   933                           ;doprnt.c: 536: while(c = *f++) {
   934                           
   935  0156  3001               	movlw	1
   936  0157  07CD               	addwf	sprintf@f,f
   937  0158  30FF               	movlw	-1
   938  0159  074D               	addwf	sprintf@f,w
   939  015A  0084               	movwf	4
   940  015B  120A  118A  222F  120A  118A  	fcall	stringdir
   941  0160  00D2               	movwf	??_sprintf
   942  0161  0852               	movf	??_sprintf,w
   943  0162  00DB               	movwf	sprintf@c
   944  0163  085B               	movf	sprintf@c,w
   945  0164  1903               	btfsc	3,2
   946  0165  2A20               	goto	l1220
   947                           
   948                           ;doprnt.c: 538: if(c != '%')
   949  0166  3025               	movlw	37
   950  0167  065B               	xorwf	sprintf@c,w
   951  0168  1903               	btfsc	3,2
   952  0169  2976               	goto	l1174
   953                           
   954                           ;doprnt.c: 540: {
   955                           ;doprnt.c: 541: ((*sp++ = (c)));
   956  016A  085B               	movf	sprintf@c,w
   957  016B  00D2               	movwf	??_sprintf
   958  016C  085A               	movf	sprintf@sp,w
   959  016D  0084               	movwf	4
   960  016E  0852               	movf	??_sprintf,w
   961  016F  1383               	bcf	3,7	;select IRP bank0
   962  0170  0080               	movwf	0
   963  0171  3001               	movlw	1
   964  0172  00D2               	movwf	??_sprintf
   965  0173  0852               	movf	??_sprintf,w
   966  0174  07DA               	addwf	sprintf@sp,f
   967                           
   968                           ;doprnt.c: 542: continue;
   969  0175  2956               	goto	l1218
   970  0176                     l1174:	
   971                           
   972                           ;doprnt.c: 543: }
   973                           ;doprnt.c: 548: flag = 0;
   974  0176  01D6               	clrf	sprintf@flag
   975                           
   976                           ;doprnt.c: 822: }
   977                           
   978                           ;doprnt.c: 813: continue;
   979                           
   980                           ;doprnt.c: 802: default:
   981                           
   982                           ;doprnt.c: 698: case 'i':
   983                           ;doprnt.c: 699: break;
   984                           
   985                           ;doprnt.c: 697: case 'd':
   986                           
   987                           ;doprnt.c: 638: goto alldone;
   988                           
   989                           ;doprnt.c: 637: case 0:
   990                           
   991                           ;doprnt.c: 635: switch(c = *f++) {
   992  0177  3001               	movlw	1
   993  0178  07CD               	addwf	sprintf@f,f
   994  0179  30FF               	movlw	-1
   995  017A  074D               	addwf	sprintf@f,w
   996  017B  0084               	movwf	4
   997  017C  120A  118A  222F  120A  118A  	fcall	stringdir
   998  0181  00DB               	movwf	sprintf@c
   999                           
  1000                           ; Switch size 1, requested type "space"
  1001                           ; Number of cases is 3, Range of values is 0 to 105
  1002                           ; switch strategies available:
  1003                           ; Name         Instructions Cycles
  1004                           ; simple_byte           10     6 (average)
  1005                           ; jumptable            260     6 (fixed)
  1006                           ;	Chosen strategy is simple_byte
  1007  0182  3A00               	xorlw	0	; case 0
  1008  0183  1903               	skipnz
  1009  0184  2A20               	goto	l1220
  1010  0185  3A64               	xorlw	100	; case 100
  1011  0186  1903               	skipnz
  1012  0187  298C               	goto	l1180
  1013  0188  3A0D               	xorlw	13	; case 105
  1014  0189  1903               	skipnz
  1015  018A  298C               	goto	l1180
  1016  018B  2956               	goto	l1218
  1017  018C                     l1180:	
  1018                           
  1019                           ;doprnt.c: 1253: {
  1020                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1021  018C  0855               	movf	sprintf@ap,w
  1022  018D  0084               	movwf	4
  1023  018E  1383               	bcf	3,7	;select IRP bank0
  1024  018F  0800               	movf	0,w
  1025  0190  00D8               	movwf	sprintf@val
  1026  0191  0A84               	incf	4,f
  1027  0192  0800               	movf	0,w
  1028  0193  00D9               	movwf	sprintf@val+1
  1029  0194  3002               	movlw	2
  1030  0195  00D2               	movwf	??_sprintf
  1031  0196  0852               	movf	??_sprintf,w
  1032  0197  07D5               	addwf	sprintf@ap,f
  1033                           
  1034                           ;doprnt.c: 1261: if((int)val < 0) {
  1035  0198  1FD9               	btfss	sprintf@val+1,7
  1036  0199  29A3               	goto	l1190
  1037                           
  1038                           ;doprnt.c: 1262: flag |= 0x03;
  1039  019A  3003               	movlw	3
  1040  019B  00D2               	movwf	??_sprintf
  1041  019C  0852               	movf	??_sprintf,w
  1042  019D  04D6               	iorwf	sprintf@flag,f
  1043                           
  1044                           ;doprnt.c: 1263: val = -val;
  1045  019E  09D8               	comf	sprintf@val,f
  1046  019F  09D9               	comf	sprintf@val+1,f
  1047  01A0  0AD8               	incf	sprintf@val,f
  1048  01A1  1903               	skipnz
  1049  01A2  0AD9               	incf	sprintf@val+1,f
  1050  01A3                     l1190:	
  1051                           
  1052                           ;doprnt.c: 1264: }
  1053                           ;doprnt.c: 1266: }
  1054                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1055  01A3  01DB               	clrf	sprintf@c
  1056  01A4  0ADB               	incf	sprintf@c,f
  1057  01A5  3005               	movlw	5
  1058  01A6  065B               	xorwf	sprintf@c,w
  1059  01A7  1903               	btfsc	3,2
  1060  01A8  29CA               	goto	l1202
  1061  01A9                     l1196:	
  1062                           
  1063                           ;doprnt.c: 1306: if(val < dpowers[c])
  1064  01A9  085B               	movf	sprintf@c,w
  1065  01AA  00D2               	movwf	??_sprintf
  1066  01AB  0752               	addwf	??_sprintf,w
  1067  01AC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1068  01AD  0084               	movwf	4
  1069  01AE  120A  118A  222F  120A  118A  	fcall	stringdir
  1070  01B3  00D3               	movwf	??_sprintf+1
  1071  01B4  120A  118A  222F  120A  118A  	fcall	stringdir
  1072  01B9  00D4               	movwf	??_sprintf+2
  1073  01BA  0854               	movf	??_sprintf+2,w
  1074  01BB  0259               	subwf	sprintf@val+1,w
  1075  01BC  1D03               	skipz
  1076  01BD  29C0               	goto	u945
  1077  01BE  0853               	movf	??_sprintf+1,w
  1078  01BF  0258               	subwf	sprintf@val,w
  1079  01C0                     u945:	
  1080  01C0  1C03               	btfss	3,0
  1081  01C1  29CA               	goto	l1202
  1082                           
  1083                           ;doprnt.c: 1307: break;
  1084  01C2  3001               	movlw	1
  1085  01C3  00D2               	movwf	??_sprintf
  1086  01C4  0852               	movf	??_sprintf,w
  1087  01C5  07DB               	addwf	sprintf@c,f
  1088  01C6  3005               	movlw	5
  1089  01C7  065B               	xorwf	sprintf@c,w
  1090  01C8  1D03               	btfss	3,2
  1091  01C9  29A9               	goto	l1196
  1092  01CA                     l1202:	
  1093                           
  1094                           ;doprnt.c: 1422: {
  1095                           ;doprnt.c: 1438: if(flag & 0x03)
  1096  01CA  0856               	movf	sprintf@flag,w
  1097  01CB  3903               	andlw	3
  1098  01CC  1903               	btfsc	3,2
  1099  01CD  29D9               	goto	l1208
  1100                           
  1101                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1102  01CE  302D               	movlw	45
  1103  01CF  00D2               	movwf	??_sprintf
  1104  01D0  085A               	movf	sprintf@sp,w
  1105  01D1  0084               	movwf	4
  1106  01D2  0852               	movf	??_sprintf,w
  1107  01D3  1383               	bcf	3,7	;select IRP bank0
  1108  01D4  0080               	movwf	0
  1109  01D5  3001               	movlw	1
  1110  01D6  00D2               	movwf	??_sprintf
  1111  01D7  0852               	movf	??_sprintf,w
  1112  01D8  07DA               	addwf	sprintf@sp,f
  1113  01D9                     l1208:	
  1114                           
  1115                           ;doprnt.c: 1469: }
  1116                           ;doprnt.c: 1472: prec = c;
  1117  01D9  085B               	movf	sprintf@c,w
  1118  01DA  00D2               	movwf	??_sprintf
  1119  01DB  0852               	movf	??_sprintf,w
  1120  01DC  00D7               	movwf	sprintf@prec
  1121  01DD                     l1216:	
  1122                           ;doprnt.c: 1474: while(prec--) {
  1123                           
  1124  01DD  30FF               	movlw	255
  1125  01DE  00D2               	movwf	??_sprintf
  1126  01DF  0852               	movf	??_sprintf,w
  1127  01E0  07D7               	addwf	sprintf@prec,f
  1128  01E1  0A57               	incf	sprintf@prec,w
  1129  01E2  1903               	btfsc	3,2
  1130  01E3  2956               	goto	l1218
  1131                           
  1132                           ;doprnt.c: 1478: {
  1133                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1134  01E4  300A               	movlw	10
  1135  01E5  00C7               	movwf	___lwmod@divisor
  1136  01E6  3000               	movlw	0
  1137  01E7  00C8               	movwf	___lwmod@divisor+1
  1138  01E8  0857               	movf	sprintf@prec,w
  1139  01E9  00D2               	movwf	??_sprintf
  1140  01EA  0752               	addwf	??_sprintf,w
  1141  01EB  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1142  01EC  0084               	movwf	4
  1143  01ED  120A  118A  222F  120A  118A  	fcall	stringdir
  1144  01F2  00F4               	movwf	___lwdiv@divisor
  1145  01F3  120A  118A  222F  120A  118A  	fcall	stringdir
  1146  01F8  00F5               	movwf	___lwdiv@divisor+1
  1147  01F9  0859               	movf	sprintf@val+1,w
  1148  01FA  00F7               	movwf	___lwdiv@dividend+1
  1149  01FB  0858               	movf	sprintf@val,w
  1150  01FC  00F6               	movwf	___lwdiv@dividend
  1151  01FD  120A  118A  237F  120A  118A  	fcall	___lwdiv
  1152  0202  0875               	movf	?___lwdiv+1,w
  1153  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1154  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1155  0205  00CA               	movwf	___lwmod@dividend+1
  1156  0206  0874               	movf	?___lwdiv,w
  1157  0207  00C9               	movwf	___lwmod@dividend
  1158  0208  120A  118A  23F6  120A  118A  	fcall	___lwmod
  1159  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1160  020E  1303               	bcf	3,6	;RP1=0, select bank0
  1161  020F  0847               	movf	?___lwmod,w
  1162  0210  3E30               	addlw	48
  1163  0211  00D3               	movwf	??_sprintf+1
  1164  0212  0853               	movf	??_sprintf+1,w
  1165  0213  00DB               	movwf	sprintf@c
  1166                           
  1167                           ;doprnt.c: 1523: }
  1168                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1169  0214  085B               	movf	sprintf@c,w
  1170  0215  00D2               	movwf	??_sprintf
  1171  0216  085A               	movf	sprintf@sp,w
  1172  0217  0084               	movwf	4
  1173  0218  0852               	movf	??_sprintf,w
  1174  0219  1383               	bcf	3,7	;select IRP bank0
  1175  021A  0080               	movwf	0
  1176  021B  3001               	movlw	1
  1177  021C  00D2               	movwf	??_sprintf
  1178  021D  0852               	movf	??_sprintf,w
  1179  021E  07DA               	addwf	sprintf@sp,f
  1180  021F  29DD               	goto	l1216
  1181  0220                     l1220:	
  1182                           ;doprnt.c: 1525: }
  1183                           ;doprnt.c: 1533: }
  1184                           ;doprnt.c: 1535: alldone:
  1185                           
  1186                           
  1187                           ;doprnt.c: 1538: *sp = 0;
  1188  0220  085A               	movf	sprintf@sp,w
  1189  0221  0084               	movwf	4
  1190  0222  1383               	bcf	3,7	;select IRP bank0
  1191  0223  0180               	clrf	0
  1192  0224  0008               	return
  1193  0225                     __end_of_sprintf:	
  1194                           ;doprnt.c: 1540: return 0;
  1195                           ;	Return value of _sprintf is never used
  1196                           
  1197                           
  1198                           	psect	text2
  1199  03F6                     __ptext2:	
  1200 ;; *************** function ___lwmod *****************
  1201 ;; Defined at:
  1202 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;  divisor         2    3[BANK0 ] unsigned int 
  1205 ;;  dividend        2    5[BANK0 ] unsigned int 
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;  counter         1    8[BANK0 ] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  2    3[BANK0 ] unsigned int 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1217 ;;      Params:         0       4       0       0       0
  1218 ;;      Locals:         0       1       0       0       0
  1219 ;;      Temps:          0       1       0       0       0
  1220 ;;      Totals:         0       6       0       0       0
  1221 ;;Total ram usage:        6 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    1
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_sprintf
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           
  1232                           ;psect for function ___lwmod
  1233  03F6                     ___lwmod:	
  1234                           
  1235                           ;incstack = 0
  1236                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1237  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1238  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1239  03F8  0847               	movf	___lwmod@divisor,w
  1240  03F9  0448               	iorwf	___lwmod@divisor+1,w
  1241  03FA  1903               	btfsc	3,2
  1242  03FB  2C25               	goto	l1152
  1243  03FC  01CC               	clrf	___lwmod@counter
  1244  03FD  0ACC               	incf	___lwmod@counter,f
  1245  03FE                     l1142:	
  1246  03FE  1BC8               	btfsc	___lwmod@divisor+1,7
  1247  03FF  2C0C               	goto	l1144
  1248  0400  3001               	movlw	1
  1249  0401                     u865:	
  1250  0401  1003               	clrc
  1251  0402  0DC7               	rlf	___lwmod@divisor,f
  1252  0403  0DC8               	rlf	___lwmod@divisor+1,f
  1253  0404  3EFF               	addlw	-1
  1254  0405  1D03               	skipz
  1255  0406  2C01               	goto	u865
  1256  0407  3001               	movlw	1
  1257  0408  00CB               	movwf	??___lwmod
  1258  0409  084B               	movf	??___lwmod,w
  1259  040A  07CC               	addwf	___lwmod@counter,f
  1260  040B  2BFE               	goto	l1142
  1261  040C                     l1144:	
  1262  040C  0848               	movf	___lwmod@divisor+1,w
  1263  040D  024A               	subwf	___lwmod@dividend+1,w
  1264  040E  1D03               	skipz
  1265  040F  2C12               	goto	u885
  1266  0410  0847               	movf	___lwmod@divisor,w
  1267  0411  0249               	subwf	___lwmod@dividend,w
  1268  0412                     u885:	
  1269  0412  1C03               	skipc
  1270  0413  2C1A               	goto	l1148
  1271  0414  0847               	movf	___lwmod@divisor,w
  1272  0415  02C9               	subwf	___lwmod@dividend,f
  1273  0416  0848               	movf	___lwmod@divisor+1,w
  1274  0417  1C03               	skipc
  1275  0418  03CA               	decf	___lwmod@dividend+1,f
  1276  0419  02CA               	subwf	___lwmod@dividend+1,f
  1277  041A                     l1148:	
  1278  041A  3001               	movlw	1
  1279  041B                     u895:	
  1280  041B  1003               	clrc
  1281  041C  0CC8               	rrf	___lwmod@divisor+1,f
  1282  041D  0CC7               	rrf	___lwmod@divisor,f
  1283  041E  3EFF               	addlw	-1
  1284  041F  1D03               	skipz
  1285  0420  2C1B               	goto	u895
  1286  0421  3001               	movlw	1
  1287  0422  02CC               	subwf	___lwmod@counter,f
  1288  0423  1D03               	btfss	3,2
  1289  0424  2C0C               	goto	l1144
  1290  0425                     l1152:	
  1291  0425  084A               	movf	___lwmod@dividend+1,w
  1292  0426  00C8               	movwf	?___lwmod+1
  1293  0427  0849               	movf	___lwmod@dividend,w
  1294  0428  00C7               	movwf	?___lwmod
  1295  0429  0008               	return
  1296  042A                     __end_of___lwmod:	
  1297                           
  1298                           	psect	text3
  1299  037F                     __ptext3:	
  1300 ;; *************** function ___lwdiv *****************
  1301 ;; Defined at:
  1302 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  divisor         2    4[COMMON] unsigned int 
  1305 ;;  dividend        2    6[COMMON] unsigned int 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  quotient        2    0[BANK0 ] unsigned int 
  1308 ;;  counter         1    2[BANK0 ] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  2    4[COMMON] unsigned int 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1318 ;;      Params:         4       0       0       0       0
  1319 ;;      Locals:         0       3       0       0       0
  1320 ;;      Temps:          1       0       0       0       0
  1321 ;;      Totals:         5       3       0       0       0
  1322 ;;Total ram usage:        8 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    1
  1325 ;; This function calls:
  1326 ;;		Nothing
  1327 ;; This function is called by:
  1328 ;;		_sprintf
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           
  1333                           ;psect for function ___lwdiv
  1334  037F                     ___lwdiv:	
  1335                           
  1336                           ;incstack = 0
  1337                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1338  037F  1283               	bcf	3,5	;RP0=0, select bank0
  1339  0380  1303               	bcf	3,6	;RP1=0, select bank0
  1340  0381  01C4               	clrf	___lwdiv@quotient
  1341  0382  01C5               	clrf	___lwdiv@quotient+1
  1342  0383  0874               	movf	___lwdiv@divisor,w
  1343  0384  0475               	iorwf	___lwdiv@divisor+1,w
  1344  0385  1903               	btfsc	3,2
  1345  0386  2BB8               	goto	l924
  1346  0387  01C6               	clrf	___lwdiv@counter
  1347  0388  0AC6               	incf	___lwdiv@counter,f
  1348  0389                     l912:	
  1349  0389  1BF5               	btfsc	___lwdiv@divisor+1,7
  1350  038A  2B97               	goto	l914
  1351  038B  3001               	movlw	1
  1352  038C                     u495:	
  1353  038C  1003               	clrc
  1354  038D  0DF4               	rlf	___lwdiv@divisor,f
  1355  038E  0DF5               	rlf	___lwdiv@divisor+1,f
  1356  038F  3EFF               	addlw	-1
  1357  0390  1D03               	skipz
  1358  0391  2B8C               	goto	u495
  1359  0392  3001               	movlw	1
  1360  0393  00F8               	movwf	??___lwdiv
  1361  0394  0878               	movf	??___lwdiv,w
  1362  0395  07C6               	addwf	___lwdiv@counter,f
  1363  0396  2B89               	goto	l912
  1364  0397                     l914:	
  1365  0397  3001               	movlw	1
  1366  0398                     u515:	
  1367  0398  1003               	clrc
  1368  0399  0DC4               	rlf	___lwdiv@quotient,f
  1369  039A  0DC5               	rlf	___lwdiv@quotient+1,f
  1370  039B  3EFF               	addlw	-1
  1371  039C  1D03               	skipz
  1372  039D  2B98               	goto	u515
  1373  039E  0875               	movf	___lwdiv@divisor+1,w
  1374  039F  0277               	subwf	___lwdiv@dividend+1,w
  1375  03A0  1D03               	skipz
  1376  03A1  2BA4               	goto	u525
  1377  03A2  0874               	movf	___lwdiv@divisor,w
  1378  03A3  0276               	subwf	___lwdiv@dividend,w
  1379  03A4                     u525:	
  1380  03A4  1C03               	skipc
  1381  03A5  2BAD               	goto	l920
  1382  03A6  0874               	movf	___lwdiv@divisor,w
  1383  03A7  02F6               	subwf	___lwdiv@dividend,f
  1384  03A8  0875               	movf	___lwdiv@divisor+1,w
  1385  03A9  1C03               	skipc
  1386  03AA  03F7               	decf	___lwdiv@dividend+1,f
  1387  03AB  02F7               	subwf	___lwdiv@dividend+1,f
  1388  03AC  1444               	bsf	___lwdiv@quotient,0
  1389  03AD                     l920:	
  1390  03AD  3001               	movlw	1
  1391  03AE                     u535:	
  1392  03AE  1003               	clrc
  1393  03AF  0CF5               	rrf	___lwdiv@divisor+1,f
  1394  03B0  0CF4               	rrf	___lwdiv@divisor,f
  1395  03B1  3EFF               	addlw	-1
  1396  03B2  1D03               	skipz
  1397  03B3  2BAE               	goto	u535
  1398  03B4  3001               	movlw	1
  1399  03B5  02C6               	subwf	___lwdiv@counter,f
  1400  03B6  1D03               	btfss	3,2
  1401  03B7  2B97               	goto	l914
  1402  03B8                     l924:	
  1403  03B8  0845               	movf	___lwdiv@quotient+1,w
  1404  03B9  00F5               	movwf	?___lwdiv+1
  1405  03BA  0844               	movf	___lwdiv@quotient,w
  1406  03BB  00F4               	movwf	?___lwdiv
  1407  03BC  0008               	return
  1408  03BD                     __end_of___lwdiv:	
  1409                           
  1410                           	psect	text4
  1411  033E                     __ptext4:	
  1412 ;; *************** function _Lcd_Write_String *****************
  1413 ;; Defined at:
  1414 ;;		line 109 in file "lcd.h"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  a               2    0[BANK0 ] PTR unsigned char 
  1417 ;;		 -> freqString(20), STR_5(18), STR_4(10), STR_3(13), 
  1418 ;;		 -> STR_2(10), STR_1(16), 
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  i               2    5[BANK0 ] int 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1430 ;;      Params:         0       2       0       0       0
  1431 ;;      Locals:         0       2       0       0       0
  1432 ;;      Temps:          0       3       0       0       0
  1433 ;;      Totals:         0       7       0       0       0
  1434 ;;Total ram usage:        7 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    3
  1437 ;; This function calls:
  1438 ;;		_Lcd_Write_Char
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           
  1445                           ;psect for function _Lcd_Write_String
  1446  033E                     _Lcd_Write_String:	
  1447                           
  1448                           ;lcd.h: 111: int i;
  1449                           ;lcd.h: 112: for(i=0;a[i]!='\0';i++)
  1450                           
  1451                           ;incstack = 0
  1452                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1453  033E  1283               	bcf	3,5	;RP0=0, select bank0
  1454  033F  1303               	bcf	3,6	;RP1=0, select bank0
  1455  0340  01C9               	clrf	Lcd_Write_String@i
  1456  0341  01CA               	clrf	Lcd_Write_String@i+1
  1457  0342                     l988:	
  1458  0342  0849               	movf	Lcd_Write_String@i,w
  1459  0343  0744               	addwf	Lcd_Write_String@a,w
  1460  0344  00C7               	movwf	??_Lcd_Write_String+1
  1461  0345  0845               	movf	Lcd_Write_String@a+1,w
  1462  0346  00C6               	movwf	??_Lcd_Write_String
  1463  0347  1803               	skipnc
  1464  0348  0AC6               	incf	??_Lcd_Write_String,f
  1465  0349  1BC9               	btfsc	Lcd_Write_String@i,7
  1466  034A  03C6               	decf	??_Lcd_Write_String,f
  1467  034B  1283               	bcf	3,5	;RP0=0, select bank0
  1468  034C  1303               	bcf	3,6	;RP1=0, select bank0
  1469  034D  0846               	movf	??_Lcd_Write_String,w
  1470  034E  00C8               	movwf	??_Lcd_Write_String+2
  1471  034F  0848               	movf	??_Lcd_Write_String+2,w
  1472  0350  00FF               	movwf	127
  1473  0351  0847               	movf	??_Lcd_Write_String+1,w
  1474  0352  0084               	movwf	4
  1475  0353  120A  118A  2225  120A  118A  	fcall	stringtab
  1476  0358  3A00               	xorlw	0
  1477  0359  1903               	btfsc	3,2
  1478  035A  0008               	return
  1479                           
  1480                           ;lcd.h: 113: Lcd_Write_Char(a[i]);
  1481  035B  0849               	movf	Lcd_Write_String@i,w
  1482  035C  0744               	addwf	Lcd_Write_String@a,w
  1483  035D  00C7               	movwf	??_Lcd_Write_String+1
  1484  035E  0845               	movf	Lcd_Write_String@a+1,w
  1485  035F  00C6               	movwf	??_Lcd_Write_String
  1486  0360  1803               	skipnc
  1487  0361  0AC6               	incf	??_Lcd_Write_String,f
  1488  0362  1BC9               	btfsc	Lcd_Write_String@i,7
  1489  0363  03C6               	decf	??_Lcd_Write_String,f
  1490  0364  1283               	bcf	3,5	;RP0=0, select bank0
  1491  0365  1303               	bcf	3,6	;RP1=0, select bank0
  1492  0366  0846               	movf	??_Lcd_Write_String,w
  1493  0367  00C8               	movwf	??_Lcd_Write_String+2
  1494  0368  0848               	movf	??_Lcd_Write_String+2,w
  1495  0369  00FF               	movwf	127
  1496  036A  0847               	movf	??_Lcd_Write_String+1,w
  1497  036B  0084               	movwf	4
  1498  036C  120A  118A  2225  120A  118A  	fcall	stringtab
  1499  0371  120A  118A  23BD  120A  118A  	fcall	_Lcd_Write_Char
  1500  0376  3001               	movlw	1
  1501  0377  1283               	bcf	3,5	;RP0=0, select bank0
  1502  0378  1303               	bcf	3,6	;RP1=0, select bank0
  1503  0379  07C9               	addwf	Lcd_Write_String@i,f
  1504  037A  1803               	skipnc
  1505  037B  0ACA               	incf	Lcd_Write_String@i+1,f
  1506  037C  3000               	movlw	0
  1507  037D  07CA               	addwf	Lcd_Write_String@i+1,f
  1508  037E  2B42               	goto	l988
  1509  037F                     __end_of_Lcd_Write_String:	
  1510                           
  1511                           	psect	text5
  1512  03BD                     __ptext5:	
  1513 ;; *************** function _Lcd_Write_Char *****************
  1514 ;; Defined at:
  1515 ;;		line 93 in file "lcd.h"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  a               1    wreg     unsigned char 
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;  a               1    8[COMMON] unsigned char 
  1520 ;;  y               1    7[COMMON] unsigned char 
  1521 ;;  temp            1    6[COMMON] unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, status,2, status,0, pclath, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1531 ;;      Params:         0       0       0       0       0
  1532 ;;      Locals:         3       0       0       0       0
  1533 ;;      Temps:          1       0       0       0       0
  1534 ;;      Totals:         4       0       0       0       0
  1535 ;;Total ram usage:        4 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; Hardware stack levels required when called:    2
  1538 ;; This function calls:
  1539 ;;		_Lcd_Port
  1540 ;; This function is called by:
  1541 ;;		_Lcd_Write_String
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           
  1546                           ;psect for function _Lcd_Write_Char
  1547  03BD                     _Lcd_Write_Char:	
  1548                           
  1549                           ;incstack = 0
  1550                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1551                           ;Lcd_Write_Char@a stored from wreg
  1552  03BD  00F8               	movwf	Lcd_Write_Char@a
  1553                           
  1554                           ;lcd.h: 95: char temp,y;
  1555                           ;lcd.h: 96: temp = a&0x0F;
  1556  03BE  0878               	movf	Lcd_Write_Char@a,w
  1557  03BF  390F               	andlw	15
  1558  03C0  00F5               	movwf	??_Lcd_Write_Char
  1559  03C1  0875               	movf	??_Lcd_Write_Char,w
  1560  03C2  00F6               	movwf	Lcd_Write_Char@temp
  1561                           
  1562                           ;lcd.h: 97: y = a&0xF0;
  1563  03C3  0878               	movf	Lcd_Write_Char@a,w
  1564  03C4  39F0               	andlw	240
  1565  03C5  00F5               	movwf	??_Lcd_Write_Char
  1566  03C6  0875               	movf	??_Lcd_Write_Char,w
  1567  03C7  00F7               	movwf	Lcd_Write_Char@y
  1568                           
  1569                           ;lcd.h: 98: RB7 = 1;
  1570  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  1571  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  1572  03CA  1786               	bsf	6,7	;volatile
  1573                           
  1574                           ;lcd.h: 99: Lcd_Port(y>>4);
  1575  03CB  0877               	movf	Lcd_Write_Char@y,w
  1576  03CC  00F5               	movwf	??_Lcd_Write_Char
  1577  03CD  3004               	movlw	4
  1578  03CE                     u475:	
  1579  03CE  1003               	clrc
  1580  03CF  0CF5               	rrf	??_Lcd_Write_Char,f
  1581  03D0  3EFF               	addlw	-1
  1582  03D1  1D03               	skipz
  1583  03D2  2BCE               	goto	u475
  1584  03D3  0875               	movf	??_Lcd_Write_Char,w
  1585  03D4  120A  118A  246C  120A  118A  	fcall	_Lcd_Port
  1586                           
  1587                           ;lcd.h: 100: RB6 = 1;
  1588  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  1589  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  1590  03DB  1706               	bsf	6,6	;volatile
  1591                           
  1592                           ;lcd.h: 101: _delay((unsigned long)((40)*(20000000/4000000.0)));
  1593  03DC  3042               	movlw	66
  1594  03DD  00F5               	movwf	??_Lcd_Write_Char
  1595  03DE                     u1087:	
  1596  03DE  0BF5               	decfsz	??_Lcd_Write_Char,f
  1597  03DF  2BDE               	goto	u1087
  1598  03E0  0000               	nop
  1599                           
  1600                           ;lcd.h: 102: RB6 = 0;
  1601  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  1602  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  1603  03E3  1306               	bcf	6,6	;volatile
  1604                           
  1605                           ;lcd.h: 103: Lcd_Port(temp);
  1606  03E4  0876               	movf	Lcd_Write_Char@temp,w
  1607  03E5  120A  118A  246C  120A  118A  	fcall	_Lcd_Port
  1608                           
  1609                           ;lcd.h: 104: RB6 = 1;
  1610  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  1611  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  1612  03EC  1706               	bsf	6,6	;volatile
  1613                           
  1614                           ;lcd.h: 105: _delay((unsigned long)((40)*(20000000/4000000.0)));
  1615  03ED  3042               	movlw	66
  1616  03EE  00F5               	movwf	??_Lcd_Write_Char
  1617  03EF                     u1097:	
  1618  03EF  0BF5               	decfsz	??_Lcd_Write_Char,f
  1619  03F0  2BEF               	goto	u1097
  1620  03F1  0000               	nop
  1621                           
  1622                           ;lcd.h: 106: RB6 = 0;
  1623  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  1624  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  1625  03F4  1306               	bcf	6,6	;volatile
  1626  03F5  0008               	return
  1627  03F6                     __end_of_Lcd_Write_Char:	
  1628                           
  1629                           	psect	text6
  1630  0486                     __ptext6:	
  1631 ;; *************** function _Lcd_Shift_Right *****************
  1632 ;; Defined at:
  1633 ;;		line 116 in file "lcd.h"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;		None
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;		None
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  1    wreg      void 
  1640 ;; Registers used:
  1641 ;;		wreg, status,2, status,0, pclath, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1647 ;;      Params:         0       0       0       0       0
  1648 ;;      Locals:         0       0       0       0       0
  1649 ;;      Temps:          0       0       0       0       0
  1650 ;;      Totals:         0       0       0       0       0
  1651 ;;Total ram usage:        0 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    3
  1654 ;; This function calls:
  1655 ;;		_Lcd_Cmd
  1656 ;; This function is called by:
  1657 ;;		_main
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           
  1662                           ;psect for function _Lcd_Shift_Right
  1663  0486                     _Lcd_Shift_Right:	
  1664                           
  1665                           ;lcd.h: 118: Lcd_Cmd(0x01);
  1666                           
  1667                           ;incstack = 0
  1668                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  1669  0486  3001               	movlw	1
  1670  0487  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1671                           
  1672                           ;lcd.h: 119: Lcd_Cmd(0x0C);
  1673  048C  300C               	movlw	12
  1674  048D  120A  118A  2452   	fcall	_Lcd_Cmd
  1675  0490  0008               	return
  1676  0491                     __end_of_Lcd_Shift_Right:	
  1677                           
  1678                           	psect	text7
  1679  0491                     __ptext7:	
  1680 ;; *************** function _Lcd_Shift_Left *****************
  1681 ;; Defined at:
  1682 ;;		line 122 in file "lcd.h"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;		None
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;		None
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  1    wreg      void 
  1689 ;; Registers used:
  1690 ;;		wreg, status,2, status,0, pclath, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1696 ;;      Params:         0       0       0       0       0
  1697 ;;      Locals:         0       0       0       0       0
  1698 ;;      Temps:          0       0       0       0       0
  1699 ;;      Totals:         0       0       0       0       0
  1700 ;;Total ram usage:        0 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    3
  1703 ;; This function calls:
  1704 ;;		_Lcd_Cmd
  1705 ;; This function is called by:
  1706 ;;		_main
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           
  1711                           ;psect for function _Lcd_Shift_Left
  1712  0491                     _Lcd_Shift_Left:	
  1713                           
  1714                           ;lcd.h: 124: Lcd_Cmd(0x01);
  1715                           
  1716                           ;incstack = 0
  1717                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  1718  0491  3001               	movlw	1
  1719  0492  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1720                           
  1721                           ;lcd.h: 125: Lcd_Cmd(0x08);
  1722  0497  3008               	movlw	8
  1723  0498  120A  118A  2452   	fcall	_Lcd_Cmd
  1724  049B  0008               	return
  1725  049C                     __end_of_Lcd_Shift_Left:	
  1726                           
  1727                           	psect	text8
  1728  02EC                     __ptext8:	
  1729 ;; *************** function _Lcd_Set_Cursor *****************
  1730 ;; Defined at:
  1731 ;;		line 53 in file "lcd.h"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  a               1    wreg     unsigned char 
  1734 ;;  b               1    8[COMMON] unsigned char 
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;  a               1    2[BANK0 ] unsigned char 
  1737 ;;  temp            1    5[BANK0 ] unsigned char 
  1738 ;;  y               1    4[BANK0 ] unsigned char 
  1739 ;;  z               1    3[BANK0 ] unsigned char 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2, status,0, pclath, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1749 ;;      Params:         1       0       0       0       0
  1750 ;;      Locals:         0       4       0       0       0
  1751 ;;      Temps:          0       2       0       0       0
  1752 ;;      Totals:         1       6       0       0       0
  1753 ;;Total ram usage:        7 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    3
  1756 ;; This function calls:
  1757 ;;		_Lcd_Cmd
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           
  1764                           ;psect for function _Lcd_Set_Cursor
  1765  02EC                     _Lcd_Set_Cursor:	
  1766                           
  1767                           ;incstack = 0
  1768                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1769                           ;Lcd_Set_Cursor@a stored from wreg
  1770  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  1771  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  1772  02EE  00C6               	movwf	Lcd_Set_Cursor@a
  1773                           
  1774                           ;lcd.h: 55: char temp,z,y;
  1775                           ;lcd.h: 56: if(a == 1)
  1776  02EF  0346               	decf	Lcd_Set_Cursor@a,w
  1777  02F0  1D03               	btfss	3,2
  1778  02F1  2B15               	goto	l962
  1779                           
  1780                           ;lcd.h: 57: {
  1781                           ;lcd.h: 58: temp = 0x80 + b - 1;
  1782  02F2  0878               	movf	Lcd_Set_Cursor@b,w
  1783  02F3  3E7F               	addlw	127
  1784  02F4  00C4               	movwf	??_Lcd_Set_Cursor
  1785  02F5  0844               	movf	??_Lcd_Set_Cursor,w
  1786  02F6  00C9               	movwf	Lcd_Set_Cursor@temp
  1787                           
  1788                           ;lcd.h: 59: z = temp>>4;
  1789  02F7  0849               	movf	Lcd_Set_Cursor@temp,w
  1790  02F8  00C4               	movwf	??_Lcd_Set_Cursor
  1791  02F9  3004               	movlw	4
  1792  02FA                     u625:	
  1793  02FA  1003               	clrc
  1794  02FB  0CC4               	rrf	??_Lcd_Set_Cursor,f
  1795  02FC  3EFF               	addlw	-1
  1796  02FD  1D03               	skipz
  1797  02FE  2AFA               	goto	u625
  1798  02FF  0844               	movf	??_Lcd_Set_Cursor,w
  1799  0300  00C5               	movwf	??_Lcd_Set_Cursor+1
  1800  0301  0845               	movf	??_Lcd_Set_Cursor+1,w
  1801  0302  00C7               	movwf	Lcd_Set_Cursor@z
  1802                           
  1803                           ;lcd.h: 60: y = temp & 0x0F;
  1804  0303  0849               	movf	Lcd_Set_Cursor@temp,w
  1805  0304  390F               	andlw	15
  1806  0305  00C4               	movwf	??_Lcd_Set_Cursor
  1807  0306  0844               	movf	??_Lcd_Set_Cursor,w
  1808  0307  00C8               	movwf	Lcd_Set_Cursor@y
  1809                           
  1810                           ;lcd.h: 61: Lcd_Cmd(z);
  1811  0308  0847               	movf	Lcd_Set_Cursor@z,w
  1812  0309  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1813                           
  1814                           ;lcd.h: 62: Lcd_Cmd(y);
  1815  030E  1283               	bcf	3,5	;RP0=0, select bank0
  1816  030F  1303               	bcf	3,6	;RP1=0, select bank0
  1817  0310  0848               	movf	Lcd_Set_Cursor@y,w
  1818  0311  120A  118A  2452   	fcall	_Lcd_Cmd
  1819                           
  1820                           ;lcd.h: 63: }
  1821  0314  0008               	return
  1822  0315                     l962:	
  1823                           
  1824                           ;lcd.h: 64: else if(a == 2)
  1825  0315  3002               	movlw	2
  1826  0316  1283               	bcf	3,5	;RP0=0, select bank0
  1827  0317  1303               	bcf	3,6	;RP1=0, select bank0
  1828  0318  0646               	xorwf	Lcd_Set_Cursor@a,w
  1829  0319  1D03               	btfss	3,2
  1830  031A  0008               	return
  1831                           
  1832                           ;lcd.h: 65: {
  1833                           ;lcd.h: 66: temp = 0xC0 + b - 1;
  1834  031B  0878               	movf	Lcd_Set_Cursor@b,w
  1835  031C  3EBF               	addlw	191
  1836  031D  00C4               	movwf	??_Lcd_Set_Cursor
  1837  031E  0844               	movf	??_Lcd_Set_Cursor,w
  1838  031F  00C9               	movwf	Lcd_Set_Cursor@temp
  1839                           
  1840                           ;lcd.h: 67: z = temp>>4;
  1841  0320  0849               	movf	Lcd_Set_Cursor@temp,w
  1842  0321  00C4               	movwf	??_Lcd_Set_Cursor
  1843  0322  3004               	movlw	4
  1844  0323                     u645:	
  1845  0323  1003               	clrc
  1846  0324  0CC4               	rrf	??_Lcd_Set_Cursor,f
  1847  0325  3EFF               	addlw	-1
  1848  0326  1D03               	skipz
  1849  0327  2B23               	goto	u645
  1850  0328  0844               	movf	??_Lcd_Set_Cursor,w
  1851  0329  00C5               	movwf	??_Lcd_Set_Cursor+1
  1852  032A  0845               	movf	??_Lcd_Set_Cursor+1,w
  1853  032B  00C7               	movwf	Lcd_Set_Cursor@z
  1854                           
  1855                           ;lcd.h: 68: y = temp & 0x0F;
  1856  032C  0849               	movf	Lcd_Set_Cursor@temp,w
  1857  032D  390F               	andlw	15
  1858  032E  00C4               	movwf	??_Lcd_Set_Cursor
  1859  032F  0844               	movf	??_Lcd_Set_Cursor,w
  1860  0330  00C8               	movwf	Lcd_Set_Cursor@y
  1861                           
  1862                           ;lcd.h: 69: Lcd_Cmd(z);
  1863  0331  0847               	movf	Lcd_Set_Cursor@z,w
  1864  0332  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1865                           
  1866                           ;lcd.h: 70: Lcd_Cmd(y);
  1867  0337  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0338  1303               	bcf	3,6	;RP1=0, select bank0
  1869  0339  0848               	movf	Lcd_Set_Cursor@y,w
  1870  033A  120A  118A  2452   	fcall	_Lcd_Cmd
  1871  033D  0008               	return
  1872  033E                     __end_of_Lcd_Set_Cursor:	
  1873                           
  1874                           	psect	text9
  1875  028B                     __ptext9:	
  1876 ;; *************** function _Lcd_Init *****************
  1877 ;; Defined at:
  1878 ;;		line 74 in file "lcd.h"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, status,2, status,0, pclath, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1892 ;;      Params:         0       0       0       0       0
  1893 ;;      Locals:         0       0       0       0       0
  1894 ;;      Temps:          0       2       0       0       0
  1895 ;;      Totals:         0       2       0       0       0
  1896 ;;Total ram usage:        2 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    3
  1899 ;; This function calls:
  1900 ;;		_Lcd_Cmd
  1901 ;;		_Lcd_Port
  1902 ;; This function is called by:
  1903 ;;		_main
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           
  1908                           ;psect for function _Lcd_Init
  1909  028B                     _Lcd_Init:	
  1910                           
  1911                           ;lcd.h: 76: Lcd_Port(0x00);
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1915  028B  3000               	movlw	0
  1916  028C  120A  118A  246C  120A  118A  	fcall	_Lcd_Port
  1917                           
  1918                           ;lcd.h: 77: _delay((unsigned long)((20)*(20000000/4000.0)));
  1919  0291  3082               	movlw	130
  1920  0292  1283               	bcf	3,5	;RP0=0, select bank0
  1921  0293  1303               	bcf	3,6	;RP1=0, select bank0
  1922  0294  00C5               	movwf	??_Lcd_Init+1
  1923  0295  30DD               	movlw	221
  1924  0296  00C4               	movwf	??_Lcd_Init
  1925  0297                     u1107:	
  1926  0297  0BC4               	decfsz	??_Lcd_Init,f
  1927  0298  2A97               	goto	u1107
  1928  0299  0BC5               	decfsz	??_Lcd_Init+1,f
  1929  029A  2A97               	goto	u1107
  1930                           
  1931                           ;lcd.h: 78: Lcd_Cmd(0x03);
  1932  029B  3003               	movlw	3
  1933  029C  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1934                           
  1935                           ;lcd.h: 79: _delay((unsigned long)((5)*(20000000/4000.0)));
  1936  02A1  3021               	movlw	33
  1937  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1938  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  1939  02A4  00C5               	movwf	??_Lcd_Init+1
  1940  02A5  3075               	movlw	117
  1941  02A6  00C4               	movwf	??_Lcd_Init
  1942  02A7                     u1117:	
  1943  02A7  0BC4               	decfsz	??_Lcd_Init,f
  1944  02A8  2AA7               	goto	u1117
  1945  02A9  0BC5               	decfsz	??_Lcd_Init+1,f
  1946  02AA  2AA7               	goto	u1117
  1947  02AB  2AAC               	nop2
  1948                           
  1949                           ;lcd.h: 80: Lcd_Cmd(0x03);
  1950  02AC  3003               	movlw	3
  1951  02AD  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1952                           
  1953                           ;lcd.h: 81: _delay((unsigned long)((11)*(20000000/4000.0)));
  1954  02B2  3048               	movlw	72
  1955  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1956  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  1957  02B5  00C5               	movwf	??_Lcd_Init+1
  1958  02B6  306B               	movlw	107
  1959  02B7  00C4               	movwf	??_Lcd_Init
  1960  02B8                     u1127:	
  1961  02B8  0BC4               	decfsz	??_Lcd_Init,f
  1962  02B9  2AB8               	goto	u1127
  1963  02BA  0BC5               	decfsz	??_Lcd_Init+1,f
  1964  02BB  2AB8               	goto	u1127
  1965  02BC  2ABD               	nop2
  1966                           
  1967                           ;lcd.h: 82: Lcd_Cmd(0x03);
  1968  02BD  3003               	movlw	3
  1969  02BE  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1970                           
  1971                           ;lcd.h: 84: Lcd_Cmd(0x02);
  1972  02C3  3002               	movlw	2
  1973  02C4  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1974                           
  1975                           ;lcd.h: 85: Lcd_Cmd(0x02);
  1976  02C9  3002               	movlw	2
  1977  02CA  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1978                           
  1979                           ;lcd.h: 86: Lcd_Cmd(0x08);
  1980  02CF  3008               	movlw	8
  1981  02D0  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1982                           
  1983                           ;lcd.h: 87: Lcd_Cmd(0x00);
  1984  02D5  3000               	movlw	0
  1985  02D6  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1986                           
  1987                           ;lcd.h: 88: Lcd_Cmd(0x0C);
  1988  02DB  300C               	movlw	12
  1989  02DC  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1990                           
  1991                           ;lcd.h: 89: Lcd_Cmd(0x00);
  1992  02E1  3000               	movlw	0
  1993  02E2  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  1994                           
  1995                           ;lcd.h: 90: Lcd_Cmd(0x06);
  1996  02E7  3006               	movlw	6
  1997  02E8  120A  118A  2452   	fcall	_Lcd_Cmd
  1998  02EB  0008               	return
  1999  02EC                     __end_of_Lcd_Init:	
  2000                           
  2001                           	psect	text10
  2002  049C                     __ptext10:	
  2003 ;; *************** function _Lcd_Clear *****************
  2004 ;; Defined at:
  2005 ;;		line 47 in file "lcd.h"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;		None
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;		None
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  2   48[None  ] int 
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0, pclath, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2019 ;;      Params:         0       0       0       0       0
  2020 ;;      Locals:         0       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0
  2022 ;;      Totals:         0       0       0       0       0
  2023 ;;Total ram usage:        0 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    3
  2026 ;; This function calls:
  2027 ;;		_Lcd_Cmd
  2028 ;; This function is called by:
  2029 ;;		_main
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           
  2034                           ;psect for function _Lcd_Clear
  2035  049C                     _Lcd_Clear:	
  2036                           
  2037                           ;lcd.h: 49: Lcd_Cmd(0);
  2038                           
  2039                           ;incstack = 0
  2040                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2041  049C  3000               	movlw	0
  2042  049D  120A  118A  2452  120A  118A  	fcall	_Lcd_Cmd
  2043                           
  2044                           ;lcd.h: 50: Lcd_Cmd(1);
  2045  04A2  3001               	movlw	1
  2046  04A3  120A  118A  2452   	fcall	_Lcd_Cmd
  2047  04A6  0008               	return
  2048  04A7                     __end_of_Lcd_Clear:	
  2049                           
  2050                           	psect	text11
  2051  0452                     __ptext11:	
  2052 ;; *************** function _Lcd_Cmd *****************
  2053 ;; Defined at:
  2054 ;;		line 38 in file "lcd.h"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  a               1    wreg     unsigned char 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  a               1    7[COMMON] unsigned char 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		wreg, status,2, status,0, pclath, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2068 ;;      Params:         0       0       0       0       0
  2069 ;;      Locals:         1       0       0       0       0
  2070 ;;      Temps:          2       0       0       0       0
  2071 ;;      Totals:         3       0       0       0       0
  2072 ;;Total ram usage:        3 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    2
  2075 ;; This function calls:
  2076 ;;		_Lcd_Port
  2077 ;; This function is called by:
  2078 ;;		_Lcd_Clear
  2079 ;;		_Lcd_Set_Cursor
  2080 ;;		_Lcd_Init
  2081 ;;		_Lcd_Shift_Right
  2082 ;;		_Lcd_Shift_Left
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           
  2087                           ;psect for function _Lcd_Cmd
  2088  0452                     _Lcd_Cmd:	
  2089                           
  2090                           ;incstack = 0
  2091                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2092                           ;Lcd_Cmd@a stored from wreg
  2093  0452  00F7               	movwf	Lcd_Cmd@a
  2094                           
  2095                           ;lcd.h: 40: RB7 = 0;
  2096  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0455  1386               	bcf	6,7	;volatile
  2099                           
  2100                           ;lcd.h: 41: Lcd_Port(a);
  2101  0456  0877               	movf	Lcd_Cmd@a,w
  2102  0457  120A  118A  246C  120A  118A  	fcall	_Lcd_Port
  2103                           
  2104                           ;lcd.h: 42: RB6 = 1;
  2105  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2106  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2107  045E  1706               	bsf	6,6	;volatile
  2108                           
  2109                           ;lcd.h: 43: _delay((unsigned long)((4)*(20000000/4000.0)));
  2110  045F  301A               	movlw	26
  2111  0460  00F6               	movwf	??_Lcd_Cmd+1
  2112  0461  30F8               	movlw	248
  2113  0462  00F5               	movwf	??_Lcd_Cmd
  2114  0463                     u1137:	
  2115  0463  0BF5               	decfsz	??_Lcd_Cmd,f
  2116  0464  2C63               	goto	u1137
  2117  0465  0BF6               	decfsz	??_Lcd_Cmd+1,f
  2118  0466  2C63               	goto	u1137
  2119  0467  0000               	nop
  2120                           
  2121                           ;lcd.h: 44: RB6 = 0;
  2122  0468  1283               	bcf	3,5	;RP0=0, select bank0
  2123  0469  1303               	bcf	3,6	;RP1=0, select bank0
  2124  046A  1306               	bcf	6,6	;volatile
  2125  046B  0008               	return
  2126  046C                     __end_of_Lcd_Cmd:	
  2127                           
  2128                           	psect	text12
  2129  046C                     __ptext12:	
  2130 ;; *************** function _Lcd_Port *****************
  2131 ;; Defined at:
  2132 ;;		line 16 in file "lcd.h"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  a               1    wreg     unsigned char 
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;  a               1    4[COMMON] unsigned char 
  2137 ;; Return value:  Size  Location     Type
  2138 ;;                  1    wreg      void 
  2139 ;; Registers used:
  2140 ;;		wreg
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 0/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2146 ;;      Params:         0       0       0       0       0
  2147 ;;      Locals:         1       0       0       0       0
  2148 ;;      Temps:          0       0       0       0       0
  2149 ;;      Totals:         1       0       0       0       0
  2150 ;;Total ram usage:        1 bytes
  2151 ;; Hardware stack levels used:    1
  2152 ;; Hardware stack levels required when called:    1
  2153 ;; This function calls:
  2154 ;;		Nothing
  2155 ;; This function is called by:
  2156 ;;		_Lcd_Cmd
  2157 ;;		_Lcd_Init
  2158 ;;		_Lcd_Write_Char
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           
  2163                           ;psect for function _Lcd_Port
  2164  046C                     _Lcd_Port:	
  2165                           
  2166                           ;incstack = 0
  2167                           ; Regs used in _Lcd_Port: [wreg]
  2168                           ;Lcd_Port@a stored from wreg
  2169  046C  00F4               	movwf	Lcd_Port@a
  2170                           
  2171                           ;lcd.h: 18: if(a & 1)
  2172  046D  1C74               	btfss	Lcd_Port@a,0
  2173  046E  2C73               	goto	l35
  2174                           
  2175                           ;lcd.h: 19: RB5 = 1;
  2176  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2177  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2178  0471  1686               	bsf	6,5	;volatile
  2179  0472  2C76               	goto	l36
  2180  0473                     l35:	
  2181                           
  2182                           ;lcd.h: 20: else
  2183                           ;lcd.h: 21: RB5 = 0;
  2184  0473  1283               	bcf	3,5	;RP0=0, select bank0
  2185  0474  1303               	bcf	3,6	;RP1=0, select bank0
  2186  0475  1286               	bcf	6,5	;volatile
  2187  0476                     l36:	
  2188                           
  2189                           ;lcd.h: 23: if(a & 2)
  2190  0476  1CF4               	btfss	Lcd_Port@a,1
  2191  0477  2C7A               	goto	l37
  2192                           
  2193                           ;lcd.h: 24: RB4 = 1;
  2194  0478  1606               	bsf	6,4	;volatile
  2195  0479  2C7B               	goto	l38
  2196  047A                     l37:	
  2197                           
  2198                           ;lcd.h: 25: else
  2199                           ;lcd.h: 26: RB4 = 0;
  2200  047A  1206               	bcf	6,4	;volatile
  2201  047B                     l38:	
  2202                           
  2203                           ;lcd.h: 28: if(a & 4)
  2204  047B  1D74               	btfss	Lcd_Port@a,2
  2205  047C  2C7F               	goto	l39
  2206                           
  2207                           ;lcd.h: 29: RB3 = 1;
  2208  047D  1586               	bsf	6,3	;volatile
  2209  047E  2C80               	goto	l40
  2210  047F                     l39:	
  2211                           
  2212                           ;lcd.h: 30: else
  2213                           ;lcd.h: 31: RB3 = 0;
  2214  047F  1186               	bcf	6,3	;volatile
  2215  0480                     l40:	
  2216                           
  2217                           ;lcd.h: 33: if(a & 8)
  2218  0480  1DF4               	btfss	Lcd_Port@a,3
  2219  0481  2C84               	goto	l41
  2220                           
  2221                           ;lcd.h: 34: RB2 = 1;
  2222  0482  1506               	bsf	6,2	;volatile
  2223  0483  0008               	return
  2224  0484                     l41:	
  2225                           
  2226                           ;lcd.h: 35: else
  2227                           ;lcd.h: 36: RB2 = 0;
  2228  0484  1106               	bcf	6,2	;volatile
  2229  0485  0008               	return
  2230  0486                     __end_of_Lcd_Port:	
  2231                           
  2232                           	psect	text13
  2233  042A                     __ptext13:	
  2234 ;; *************** function _ISR *****************
  2235 ;; Defined at:
  2236 ;;		line 38 in file "FreqMeter.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2250 ;;      Params:         0       0       0       0       0
  2251 ;;      Locals:         0       0       0       0       0
  2252 ;;      Temps:          4       0       0       0       0
  2253 ;;      Totals:         4       0       0       0       0
  2254 ;;Total ram usage:        4 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		Interrupt level 1
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           
  2264                           ;psect for function _ISR
  2265  042A                     _ISR:	
  2266                           
  2267                           ;FreqMeter.c: 39: if (INTF && INTE) {
  2268  042A  188B               	btfsc	11,1	;volatile
  2269  042B  1E0B               	btfss	11,4	;volatile
  2270  042C  2C3D               	goto	i1l86
  2271                           
  2272                           ;FreqMeter.c: 40: INTF = 0;
  2273  042D  108B               	bcf	11,1	;volatile
  2274                           
  2275                           ;FreqMeter.c: 41: pulseCounter++;
  2276  042E  3001               	movlw	1
  2277  042F  07AA               	addwf	_pulseCounter,f
  2278  0430  3000               	movlw	0
  2279  0431  1803               	skipnc
  2280  0432  3001               	movlw	1
  2281  0433  07AB               	addwf	_pulseCounter+1,f
  2282  0434  3000               	movlw	0
  2283  0435  1803               	skipnc
  2284  0436  3001               	movlw	1
  2285  0437  07AC               	addwf	_pulseCounter+2,f
  2286  0438  3000               	movlw	0
  2287  0439  1803               	skipnc
  2288  043A  3001               	movlw	1
  2289  043B  07AD               	addwf	_pulseCounter+3,f
  2290                           
  2291                           ;FreqMeter.c: 42: } else if (T0IF && T0IE) {
  2292  043C  2C47               	goto	i1l89
  2293  043D                     i1l86:	
  2294  043D  190B               	btfsc	11,2	;volatile
  2295  043E  1E8B               	btfss	11,5	;volatile
  2296  043F  2C47               	goto	i1l89
  2297                           
  2298                           ;FreqMeter.c: 43: T0IF = 0;
  2299  0440  110B               	bcf	11,2	;volatile
  2300                           
  2301                           ;FreqMeter.c: 44: timerCounterOverflow++;
  2302  0441  3001               	movlw	1
  2303  0442  07AE               	addwf	_timerCounterOverflow,f
  2304  0443  1803               	skipnc
  2305  0444  0AAF               	incf	_timerCounterOverflow+1,f
  2306  0445  3000               	movlw	0
  2307  0446  07AF               	addwf	_timerCounterOverflow+1,f
  2308  0447                     i1l89:	
  2309  0447  0873               	movf	??_ISR+3,w
  2310  0448  00FF               	movwf	127
  2311  0449  0872               	movf	??_ISR+2,w
  2312  044A  008A               	movwf	10
  2313  044B  0871               	movf	??_ISR+1,w
  2314  044C  0084               	movwf	4
  2315  044D  0E70               	swapf	??_ISR^(0+-128),w
  2316  044E  0083               	movwf	3
  2317  044F  0EFE               	swapf	126,f
  2318  0450  0E7E               	swapf	126,w
  2319  0451  0009               	retfie
  2320  0452                     __end_of_ISR:	
  2321  007E                     btemp	set	126	;btemp
  2322  007E                     wtemp0	set	126
  2323                           
  2324                           	psect	intentry
  2325  0004                     __pintentry:	
  2326                           ;incstack = 0
  2327                           ; Regs used in _ISR: [wreg]
  2328                           
  2329  0004                     interrupt_function:	
  2330  007E                     saved_w	set	btemp
  2331  0004  00FE               	movwf	btemp
  2332  0005  0E03               	swapf	3,w
  2333  0006  00F0               	movwf	??_ISR
  2334  0007  0804               	movf	4,w
  2335  0008  00F1               	movwf	??_ISR+1
  2336  0009  080A               	movf	10,w
  2337  000A  00F2               	movwf	??_ISR+2
  2338  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2339  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2340  000D  087F               	movf	btemp+1,w
  2341  000E  00F3               	movwf	??_ISR+3
  2342  000F  120A  118A  2C2A   	ljmp	_ISR


Data Sizes:
    Strings     76
    Constant    10
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     29      65
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_6(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> freqString(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> freqString(BANK0[20]), STR_5(CODE[18]), STR_4(CODE[10]), STR_3(CODE[13]), 
		 -> STR_2(CODE[10]), STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    3369
                                             24 BANK0      5     5      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    18      5    1421
                                              9 BANK0     15    10      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              4 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     586
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              5 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     698
                                              8 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              5 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      4B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      41       5       81.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      4B      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Mar 23 08:20:09 2017

                        _i 0079                          pc 0002               _pulseCounter 002A  
              __CFG_CP$OFF 0000                         l40 0480                         l41 0484  
                       l35 0473                         l36 0476                         l37 047A  
                       l38 047B                         l39 047F                         fsr 0004  
                      l920 03AD                        l912 0389                        l914 0397  
                      l924 03B8                        l962 0315                        _GIE 005F  
                      l988 0342                        _RB2 0032                        _RB3 0033  
                      _RB4 0034                        _RB5 0035                        _RB6 0036  
                      _RB7 0037               __CFG_CPD$OFF 0000                        u515 0398  
                      _ISR 042A                        u525 03A4                        u535 03AE  
                      u625 02FA                        u475 03CE                        u645 0323  
                      u495 038C                        u865 0401                        u945 01C0  
                      u885 0412                        u895 041B                        fsr0 0004  
                      _str 0020                        indf 0000               __CFG_FOSC$HS 0000  
             __CFG_LVP$OFF 0000                       ?_ISR 0070                       l1202 01CA  
                     l1220 0220                       l1142 03FE                       l1144 040C  
                     l1152 0425                       l1216 01DD                       l1208 01D9  
                     l1218 0156                       l1148 041A                       l1180 018C  
                     l1190 01A3                       l1174 0176                       l1280 010E  
                     l1272 00EC                       l1266 00E3                       l1258 00C1  
                     l1196 01A9                       l1284 011C                       STR_1 0251  
                     STR_2 026E                       STR_3 0261                       STR_4 0278  
                     STR_5 023F                       STR_6 0282                       _T0IE 005D  
                     _T0IF 005A                       u1107 0297                       u1117 02A7  
                     u1127 02B8                       u1047 005F                       u1137 0463  
                     u1057 0098                       u1067 00C9                       u1077 00F4  
                     u1087 03DE                       u1097 03EF                       _INTE 005C  
                     _INTF 0059                       i1l86 043D                       i1l89 0447  
             __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0044                       _main 0021  
                     btemp 007E              __CFG_BOREN$ON 0000                       start 0012  
       ??_Lcd_Write_String 0046            __end_of_Lcd_Cmd 046C                      ??_ISR 0070  
                    ?_main 0070              __CFG_WDTE$OFF 0000            __end_of___lwdiv 03BD  
          __end_of___lwmod 042A    __size_of_Lcd_Set_Cursor 0052                      _TRISB 0086  
  __size_of_Lcd_Shift_Left 000B            __end_of_dpowers 023F                      pclath 000A  
                    status 0003                      wtemp0 007E            __end_of_sprintf 0225  
         __end_of_Lcd_Init 02EC           __end_of_Lcd_Port 0486            __initialization 0015  
             __end_of_main 014F                     ??_main 005C         __size_of_Lcd_Clear 000B  
                   _INTCON 000B                  ??_Lcd_Cmd 0075    __size_of_Lcd_Write_Char 0039  
           __CFG_PWRTE$OFF 0000                  ??___lwdiv 0078                  ??___lwmod 004B  
 __size_of_Lcd_Shift_Right 000B                     saved_w 007E                  ??_sprintf 0052  
          Lcd_Set_Cursor@a 0046            Lcd_Set_Cursor@b 0078            Lcd_Set_Cursor@y 0048  
          Lcd_Set_Cursor@z 0047    __end_of__initialization 001D          __end_of_Lcd_Clear 04A7  
           __pcstackCOMMON 0070             _Lcd_Set_Cursor 02EC             _Lcd_Shift_Left 0491  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                 __pbssBANK0 0020  
               __pmaintext 0021                 __pintentry 0004  __size_of_Lcd_Write_String 0041  
   __end_of_Lcd_Set_Cursor 033E     __end_of_Lcd_Shift_Left 049C          ??_Lcd_Shift_Right 0078  
               ??_Lcd_Init 0044                 ??_Lcd_Port 0074                 __stringtab 0225  
           _Lcd_Write_Char 03BD                    _Lcd_Cmd 0452                 _freqString 0030  
                  ___lwdiv 037F                    ___lwmod 03F6            ?_Lcd_Set_Cursor 0078  
                  __ptext1 014F                    __ptext2 03F6                    __ptext3 037F  
                  __ptext4 033E                    __ptext5 03BD                    __ptext6 0486  
                  __ptext7 0491                    __ptext8 02EC                    __ptext9 028B  
             __size_of_ISR 0028                    _dpowers 0235            ?_Lcd_Shift_Left 0070  
        main@shiftPosition 005F                    _sprintf 014F                    clrloop0 04A8  
   __end_of_Lcd_Write_Char 03F6       end_of_initialization 001D                  Lcd_Port@a 0074  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0044          Lcd_Write_String@i 0049  
                _Lcd_Clear 049C           _Lcd_Write_String 033E        start_initialization 0015  
              __end_of_ISR 0452          __size_of_Lcd_Init 0061          __size_of_Lcd_Port 001A  
               ?_Lcd_Clear 0070            _Lcd_Shift_Right 0486            Lcd_Write_Char@a 0078  
          Lcd_Write_Char@y 0077                __pbssCOMMON 0079                  ___latbits 0002  
            __pcstackBANK0 0044                   ?_Lcd_Cmd 0070                sprintf@flag 0056  
              sprintf@prec 0057           ___lwdiv@dividend 0076           ??_Lcd_Set_Cursor 0044  
                 ?___lwdiv 0074                   ?___lwmod 0047           ??_Lcd_Shift_Left 0078  
                __pstrings 0225           ___lwdiv@quotient 0044                   ?_sprintf 004D  
        interrupt_function 0004    __end_of_Lcd_Shift_Right 0491                  clear_ram0 04A7  
                 Lcd_Cmd@a 0077                ??_Lcd_Clear 0078                __stringbase 0234  
         ??_Lcd_Write_Char 0075                   _Lcd_Init 028B                   _Lcd_Port 046C  
 __end_of_Lcd_Write_String 037F           __size_of_Lcd_Cmd 001A           __size_of___lwdiv 003E  
         __size_of___lwmod 0034         __end_of__stringtab 0235                 sprintf@val 0058  
          ___lwdiv@divisor 0074            ___lwdiv@counter 0046                   __ptext10 049C  
                 __ptext11 0452                   __ptext12 046C                   __ptext13 042A  
         __size_of_sprintf 00D6              __size_of_main 012E           ?_Lcd_Shift_Right 0070  
       Lcd_Write_Char@temp 0076                   intlevel1 0000                  sprintf@ap 0055  
                sprintf@sp 005A           ___lwmod@dividend 0049                  stringcode 022F  
       Lcd_Set_Cursor@temp 0049                 _OPTION_REG 0081                   sprintf@c 005B  
                 sprintf@f 004D            ___lwmod@divisor 0047            ___lwmod@counter 004C  
                 stringdir 022F       _timerCounterOverflow 002E                   stringtab 0225  
